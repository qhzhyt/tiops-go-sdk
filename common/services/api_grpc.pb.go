// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: tiops/common/services/api.proto

package services

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	models "tiops/common/models"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// APIServiceClient is the client API for APIService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type APIServiceClient interface {
	// define the interface and data type
	PostLog(ctx context.Context, in *models.Log, opts ...grpc.CallOption) (*ObjectResponse, error)
	GetProjectByID(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*models.ProjectInfo, error)
	//  rpc GetProjects(QueryRequest) returns(ListResponse){}
	GetWorkflowById(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*models.WorkflowInfo, error)
	GetSystemLogId(ctx context.Context, in *LogIdRequest, opts ...grpc.CallOption) (*LogIdResponse, error)
	GetWorkflowJobById(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*models.WorkflowJob, error)
	GetActionById(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*models.ActionInfo, error)
	GetActionListByIds(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*ActionListResponse, error)
	GetProjectList(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*ProjectListResponse, error)
	CreateOrUpdateWorkflowExecution(ctx context.Context, in *models.WorkflowExecution, opts ...grpc.CallOption) (*StatusResponse, error)
	CreateOrUpdateExecutionRecord(ctx context.Context, in *models.ExecutionRecord, opts ...grpc.CallOption) (*StatusResponse, error)
	AddProcessRecord(ctx context.Context, in *models.ProcessRecord, opts ...grpc.CallOption) (*StatusResponse, error)
	GetWorkflowExecutionById(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*models.WorkflowExecution, error)
	GetWorkflowRequiredResources(ctx context.Context, in *RequiredResourcesRequest, opts ...grpc.CallOption) (*models.WorkflowResources, error)
	SaveValue(ctx context.Context, in *SaveValueRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	LoadValue(ctx context.Context, in *LoadValueRequest, opts ...grpc.CallOption) (*LoadValueResponse, error)
	SaveAllValue(ctx context.Context, in *SaveAllValueRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	LoadAllValue(ctx context.Context, in *LoadAllValueRequest, opts ...grpc.CallOption) (*LoadAllValueResponse, error)
	WatchEvent(ctx context.Context, in *WatchEventRequest, opts ...grpc.CallOption) (APIService_WatchEventClient, error)
	PushEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*StatusResponse, error)
}

type aPIServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAPIServiceClient(cc grpc.ClientConnInterface) APIServiceClient {
	return &aPIServiceClient{cc}
}

func (c *aPIServiceClient) PostLog(ctx context.Context, in *models.Log, opts ...grpc.CallOption) (*ObjectResponse, error) {
	out := new(ObjectResponse)
	err := c.cc.Invoke(ctx, "/services.APIService/PostLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) GetProjectByID(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*models.ProjectInfo, error) {
	out := new(models.ProjectInfo)
	err := c.cc.Invoke(ctx, "/services.APIService/GetProjectByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) GetWorkflowById(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*models.WorkflowInfo, error) {
	out := new(models.WorkflowInfo)
	err := c.cc.Invoke(ctx, "/services.APIService/GetWorkflowById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) GetSystemLogId(ctx context.Context, in *LogIdRequest, opts ...grpc.CallOption) (*LogIdResponse, error) {
	out := new(LogIdResponse)
	err := c.cc.Invoke(ctx, "/services.APIService/GetSystemLogId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) GetWorkflowJobById(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*models.WorkflowJob, error) {
	out := new(models.WorkflowJob)
	err := c.cc.Invoke(ctx, "/services.APIService/GetWorkflowJobById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) GetActionById(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*models.ActionInfo, error) {
	out := new(models.ActionInfo)
	err := c.cc.Invoke(ctx, "/services.APIService/GetActionById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) GetActionListByIds(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*ActionListResponse, error) {
	out := new(ActionListResponse)
	err := c.cc.Invoke(ctx, "/services.APIService/GetActionListByIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) GetProjectList(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*ProjectListResponse, error) {
	out := new(ProjectListResponse)
	err := c.cc.Invoke(ctx, "/services.APIService/GetProjectList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) CreateOrUpdateWorkflowExecution(ctx context.Context, in *models.WorkflowExecution, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/services.APIService/CreateOrUpdateWorkflowExecution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) CreateOrUpdateExecutionRecord(ctx context.Context, in *models.ExecutionRecord, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/services.APIService/CreateOrUpdateExecutionRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) AddProcessRecord(ctx context.Context, in *models.ProcessRecord, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/services.APIService/AddProcessRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) GetWorkflowExecutionById(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*models.WorkflowExecution, error) {
	out := new(models.WorkflowExecution)
	err := c.cc.Invoke(ctx, "/services.APIService/GetWorkflowExecutionById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) GetWorkflowRequiredResources(ctx context.Context, in *RequiredResourcesRequest, opts ...grpc.CallOption) (*models.WorkflowResources, error) {
	out := new(models.WorkflowResources)
	err := c.cc.Invoke(ctx, "/services.APIService/GetWorkflowRequiredResources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) SaveValue(ctx context.Context, in *SaveValueRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/services.APIService/SaveValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) LoadValue(ctx context.Context, in *LoadValueRequest, opts ...grpc.CallOption) (*LoadValueResponse, error) {
	out := new(LoadValueResponse)
	err := c.cc.Invoke(ctx, "/services.APIService/LoadValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) SaveAllValue(ctx context.Context, in *SaveAllValueRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/services.APIService/SaveAllValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) LoadAllValue(ctx context.Context, in *LoadAllValueRequest, opts ...grpc.CallOption) (*LoadAllValueResponse, error) {
	out := new(LoadAllValueResponse)
	err := c.cc.Invoke(ctx, "/services.APIService/LoadAllValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) WatchEvent(ctx context.Context, in *WatchEventRequest, opts ...grpc.CallOption) (APIService_WatchEventClient, error) {
	stream, err := c.cc.NewStream(ctx, &APIService_ServiceDesc.Streams[0], "/services.APIService/WatchEvent", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIServiceWatchEventClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type APIService_WatchEventClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type aPIServiceWatchEventClient struct {
	grpc.ClientStream
}

func (x *aPIServiceWatchEventClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aPIServiceClient) PushEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/services.APIService/PushEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// APIServiceServer is the server API for APIService service.
// All implementations must embed UnimplementedAPIServiceServer
// for forward compatibility
type APIServiceServer interface {
	// define the interface and data type
	PostLog(context.Context, *models.Log) (*ObjectResponse, error)
	GetProjectByID(context.Context, *QueryRequest) (*models.ProjectInfo, error)
	//  rpc GetProjects(QueryRequest) returns(ListResponse){}
	GetWorkflowById(context.Context, *QueryRequest) (*models.WorkflowInfo, error)
	GetSystemLogId(context.Context, *LogIdRequest) (*LogIdResponse, error)
	GetWorkflowJobById(context.Context, *QueryRequest) (*models.WorkflowJob, error)
	GetActionById(context.Context, *QueryRequest) (*models.ActionInfo, error)
	GetActionListByIds(context.Context, *QueryRequest) (*ActionListResponse, error)
	GetProjectList(context.Context, *QueryRequest) (*ProjectListResponse, error)
	CreateOrUpdateWorkflowExecution(context.Context, *models.WorkflowExecution) (*StatusResponse, error)
	CreateOrUpdateExecutionRecord(context.Context, *models.ExecutionRecord) (*StatusResponse, error)
	AddProcessRecord(context.Context, *models.ProcessRecord) (*StatusResponse, error)
	GetWorkflowExecutionById(context.Context, *QueryRequest) (*models.WorkflowExecution, error)
	GetWorkflowRequiredResources(context.Context, *RequiredResourcesRequest) (*models.WorkflowResources, error)
	SaveValue(context.Context, *SaveValueRequest) (*StatusResponse, error)
	LoadValue(context.Context, *LoadValueRequest) (*LoadValueResponse, error)
	SaveAllValue(context.Context, *SaveAllValueRequest) (*StatusResponse, error)
	LoadAllValue(context.Context, *LoadAllValueRequest) (*LoadAllValueResponse, error)
	WatchEvent(*WatchEventRequest, APIService_WatchEventServer) error
	PushEvent(context.Context, *Event) (*StatusResponse, error)
	mustEmbedUnimplementedAPIServiceServer()
}

// UnimplementedAPIServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAPIServiceServer struct {
}

func (UnimplementedAPIServiceServer) PostLog(context.Context, *models.Log) (*ObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostLog not implemented")
}
func (UnimplementedAPIServiceServer) GetProjectByID(context.Context, *QueryRequest) (*models.ProjectInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectByID not implemented")
}
func (UnimplementedAPIServiceServer) GetWorkflowById(context.Context, *QueryRequest) (*models.WorkflowInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkflowById not implemented")
}
func (UnimplementedAPIServiceServer) GetSystemLogId(context.Context, *LogIdRequest) (*LogIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSystemLogId not implemented")
}
func (UnimplementedAPIServiceServer) GetWorkflowJobById(context.Context, *QueryRequest) (*models.WorkflowJob, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkflowJobById not implemented")
}
func (UnimplementedAPIServiceServer) GetActionById(context.Context, *QueryRequest) (*models.ActionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActionById not implemented")
}
func (UnimplementedAPIServiceServer) GetActionListByIds(context.Context, *QueryRequest) (*ActionListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActionListByIds not implemented")
}
func (UnimplementedAPIServiceServer) GetProjectList(context.Context, *QueryRequest) (*ProjectListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectList not implemented")
}
func (UnimplementedAPIServiceServer) CreateOrUpdateWorkflowExecution(context.Context, *models.WorkflowExecution) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrUpdateWorkflowExecution not implemented")
}
func (UnimplementedAPIServiceServer) CreateOrUpdateExecutionRecord(context.Context, *models.ExecutionRecord) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrUpdateExecutionRecord not implemented")
}
func (UnimplementedAPIServiceServer) AddProcessRecord(context.Context, *models.ProcessRecord) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProcessRecord not implemented")
}
func (UnimplementedAPIServiceServer) GetWorkflowExecutionById(context.Context, *QueryRequest) (*models.WorkflowExecution, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkflowExecutionById not implemented")
}
func (UnimplementedAPIServiceServer) GetWorkflowRequiredResources(context.Context, *RequiredResourcesRequest) (*models.WorkflowResources, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkflowRequiredResources not implemented")
}
func (UnimplementedAPIServiceServer) SaveValue(context.Context, *SaveValueRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveValue not implemented")
}
func (UnimplementedAPIServiceServer) LoadValue(context.Context, *LoadValueRequest) (*LoadValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadValue not implemented")
}
func (UnimplementedAPIServiceServer) SaveAllValue(context.Context, *SaveAllValueRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveAllValue not implemented")
}
func (UnimplementedAPIServiceServer) LoadAllValue(context.Context, *LoadAllValueRequest) (*LoadAllValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadAllValue not implemented")
}
func (UnimplementedAPIServiceServer) WatchEvent(*WatchEventRequest, APIService_WatchEventServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchEvent not implemented")
}
func (UnimplementedAPIServiceServer) PushEvent(context.Context, *Event) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushEvent not implemented")
}
func (UnimplementedAPIServiceServer) mustEmbedUnimplementedAPIServiceServer() {}

// UnsafeAPIServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to APIServiceServer will
// result in compilation errors.
type UnsafeAPIServiceServer interface {
	mustEmbedUnimplementedAPIServiceServer()
}

func RegisterAPIServiceServer(s grpc.ServiceRegistrar, srv APIServiceServer) {
	s.RegisterService(&APIService_ServiceDesc, srv)
}

func _APIService_PostLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(models.Log)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).PostLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.APIService/PostLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).PostLog(ctx, req.(*models.Log))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_GetProjectByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).GetProjectByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.APIService/GetProjectByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).GetProjectByID(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_GetWorkflowById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).GetWorkflowById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.APIService/GetWorkflowById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).GetWorkflowById(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_GetSystemLogId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).GetSystemLogId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.APIService/GetSystemLogId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).GetSystemLogId(ctx, req.(*LogIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_GetWorkflowJobById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).GetWorkflowJobById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.APIService/GetWorkflowJobById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).GetWorkflowJobById(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_GetActionById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).GetActionById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.APIService/GetActionById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).GetActionById(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_GetActionListByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).GetActionListByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.APIService/GetActionListByIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).GetActionListByIds(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_GetProjectList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).GetProjectList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.APIService/GetProjectList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).GetProjectList(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_CreateOrUpdateWorkflowExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(models.WorkflowExecution)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).CreateOrUpdateWorkflowExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.APIService/CreateOrUpdateWorkflowExecution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).CreateOrUpdateWorkflowExecution(ctx, req.(*models.WorkflowExecution))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_CreateOrUpdateExecutionRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(models.ExecutionRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).CreateOrUpdateExecutionRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.APIService/CreateOrUpdateExecutionRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).CreateOrUpdateExecutionRecord(ctx, req.(*models.ExecutionRecord))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_AddProcessRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(models.ProcessRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).AddProcessRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.APIService/AddProcessRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).AddProcessRecord(ctx, req.(*models.ProcessRecord))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_GetWorkflowExecutionById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).GetWorkflowExecutionById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.APIService/GetWorkflowExecutionById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).GetWorkflowExecutionById(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_GetWorkflowRequiredResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequiredResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).GetWorkflowRequiredResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.APIService/GetWorkflowRequiredResources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).GetWorkflowRequiredResources(ctx, req.(*RequiredResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_SaveValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).SaveValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.APIService/SaveValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).SaveValue(ctx, req.(*SaveValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_LoadValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).LoadValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.APIService/LoadValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).LoadValue(ctx, req.(*LoadValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_SaveAllValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveAllValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).SaveAllValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.APIService/SaveAllValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).SaveAllValue(ctx, req.(*SaveAllValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_LoadAllValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadAllValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).LoadAllValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.APIService/LoadAllValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).LoadAllValue(ctx, req.(*LoadAllValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_WatchEvent_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchEventRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIServiceServer).WatchEvent(m, &aPIServiceWatchEventServer{stream})
}

type APIService_WatchEventServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type aPIServiceWatchEventServer struct {
	grpc.ServerStream
}

func (x *aPIServiceWatchEventServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

func _APIService_PushEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).PushEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.APIService/PushEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).PushEvent(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

// APIService_ServiceDesc is the grpc.ServiceDesc for APIService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var APIService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.APIService",
	HandlerType: (*APIServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostLog",
			Handler:    _APIService_PostLog_Handler,
		},
		{
			MethodName: "GetProjectByID",
			Handler:    _APIService_GetProjectByID_Handler,
		},
		{
			MethodName: "GetWorkflowById",
			Handler:    _APIService_GetWorkflowById_Handler,
		},
		{
			MethodName: "GetSystemLogId",
			Handler:    _APIService_GetSystemLogId_Handler,
		},
		{
			MethodName: "GetWorkflowJobById",
			Handler:    _APIService_GetWorkflowJobById_Handler,
		},
		{
			MethodName: "GetActionById",
			Handler:    _APIService_GetActionById_Handler,
		},
		{
			MethodName: "GetActionListByIds",
			Handler:    _APIService_GetActionListByIds_Handler,
		},
		{
			MethodName: "GetProjectList",
			Handler:    _APIService_GetProjectList_Handler,
		},
		{
			MethodName: "CreateOrUpdateWorkflowExecution",
			Handler:    _APIService_CreateOrUpdateWorkflowExecution_Handler,
		},
		{
			MethodName: "CreateOrUpdateExecutionRecord",
			Handler:    _APIService_CreateOrUpdateExecutionRecord_Handler,
		},
		{
			MethodName: "AddProcessRecord",
			Handler:    _APIService_AddProcessRecord_Handler,
		},
		{
			MethodName: "GetWorkflowExecutionById",
			Handler:    _APIService_GetWorkflowExecutionById_Handler,
		},
		{
			MethodName: "GetWorkflowRequiredResources",
			Handler:    _APIService_GetWorkflowRequiredResources_Handler,
		},
		{
			MethodName: "SaveValue",
			Handler:    _APIService_SaveValue_Handler,
		},
		{
			MethodName: "LoadValue",
			Handler:    _APIService_LoadValue_Handler,
		},
		{
			MethodName: "SaveAllValue",
			Handler:    _APIService_SaveAllValue_Handler,
		},
		{
			MethodName: "LoadAllValue",
			Handler:    _APIService_LoadAllValue_Handler,
		},
		{
			MethodName: "PushEvent",
			Handler:    _APIService_PushEvent_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchEvent",
			Handler:       _APIService_WatchEvent_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "tiops/common/services/api.proto",
}
