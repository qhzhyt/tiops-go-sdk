// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tiops/common/models/workflow_job.proto

package models

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type WorkflowJobType int32

const (
	WorkflowJobType_Test     WorkflowJobType = 0
	WorkflowJobType_Once     WorkflowJobType = 1
	WorkflowJobType_LongTerm WorkflowJobType = 2
	WorkflowJobType_Crontab  WorkflowJobType = 3
)

var WorkflowJobType_name = map[int32]string{
	0: "Test",
	1: "Once",
	2: "LongTerm",
	3: "Crontab",
}

var WorkflowJobType_value = map[string]int32{
	"Test":     0,
	"Once":     1,
	"LongTerm": 2,
	"Crontab":  3,
}

func (x WorkflowJobType) String() string {
	return proto.EnumName(WorkflowJobType_name, int32(x))
}

func (WorkflowJobType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_04c94e5c97aaaf4f, []int{0}
}

type WorkflowJobStatus int32

const (
	WorkflowJobStatus_Inited     WorkflowJobStatus = 0
	WorkflowJobStatus_Scheduling WorkflowJobStatus = 1
	WorkflowJobStatus_Idle       WorkflowJobStatus = 2
)

var WorkflowJobStatus_name = map[int32]string{
	0: "Inited",
	1: "Scheduling",
	2: "Idle",
}

var WorkflowJobStatus_value = map[string]int32{
	"Inited":     0,
	"Scheduling": 1,
	"Idle":       2,
}

func (x WorkflowJobStatus) String() string {
	return proto.EnumName(WorkflowJobStatus_name, int32(x))
}

func (WorkflowJobStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_04c94e5c97aaaf4f, []int{1}
}

type WorkflowJob struct {
	XId                   string            `protobuf:"bytes,1,opt,name=_id,json=Id,proto3" json:"_id,omitempty" bson:"_id"`
	WorkflowId            string            `protobuf:"bytes,2,opt,name=workflowId,proto3" json:"workflowId,omitempty" bson:"workflowId"`
	Name                  string            `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty" bson:"name"`
	Content               string            `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty" bson:"content"`
	Type                  WorkflowJobType   `protobuf:"varint,5,opt,name=type,proto3,enum=models.WorkflowJobType" json:"type,omitempty" bson:"type"`
	CreatedBy             string            `protobuf:"bytes,6,opt,name=createdBy,proto3" json:"createdBy,omitempty" bson:"createdBy"`
	CreatedTime           int64             `protobuf:"varint,7,opt,name=createdTime,proto3" json:"createdTime,omitempty" bson:"createdTime"`
	Enable                bool              `protobuf:"varint,8,opt,name=enable,proto3" json:"enable,omitempty" bson:"enable"`
	Status                WorkflowJobStatus `protobuf:"varint,9,opt,name=status,proto3,enum=models.WorkflowJobStatus" json:"status,omitempty" bson:"status"`
	LastExecutionId       string            `protobuf:"bytes,10,opt,name=lastExecutionId,proto3" json:"lastExecutionId,omitempty" bson:"lastExecutionId"`
	LastLogId             string            `protobuf:"bytes,11,opt,name=lastLogId,proto3" json:"lastLogId,omitempty" bson:"lastLogId"`
	LastStartTime         int64             `protobuf:"varint,12,opt,name=lastStartTime,proto3" json:"lastStartTime,omitempty" bson:"lastStartTime"`
	LastStopTime          int64             `protobuf:"varint,13,opt,name=lastStopTime,proto3" json:"lastStopTime,omitempty" bson:"lastStopTime"`
	NextStartTime         int64             `protobuf:"varint,14,opt,name=nextStartTime,proto3" json:"nextStartTime,omitempty" bson:"nextStartTime"`
	RunningExecutionCount int32             `protobuf:"varint,15,opt,name=runningExecutionCount,proto3" json:"runningExecutionCount,omitempty" bson:"runningExecutionCount"`
	Workspace             string            `protobuf:"bytes,16,opt,name=workspace,proto3" json:"workspace,omitempty" bson:"workspace"`
	XXX_NoUnkeyedLiteral  struct{}          `json:"-" bson:"-"`
	XXX_unrecognized      []byte            `json:"-" bson:"-"`
	XXX_sizecache         int32             `json:"-" bson:"-"`
}

func (m *WorkflowJob) Reset()         { *m = WorkflowJob{} }
func (m *WorkflowJob) String() string { return proto.CompactTextString(m) }
func (*WorkflowJob) ProtoMessage()    {}
func (*WorkflowJob) Descriptor() ([]byte, []int) {
	return fileDescriptor_04c94e5c97aaaf4f, []int{0}
}
func (m *WorkflowJob) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkflowJob) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkflowJob.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkflowJob) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkflowJob.Merge(m, src)
}
func (m *WorkflowJob) XXX_Size() int {
	return m.Size()
}
func (m *WorkflowJob) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkflowJob.DiscardUnknown(m)
}

var xxx_messageInfo_WorkflowJob proto.InternalMessageInfo

func (m *WorkflowJob) GetXId() string {
	if m != nil {
		return m.XId
	}
	return ""
}

func (m *WorkflowJob) GetWorkflowId() string {
	if m != nil {
		return m.WorkflowId
	}
	return ""
}

func (m *WorkflowJob) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *WorkflowJob) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *WorkflowJob) GetType() WorkflowJobType {
	if m != nil {
		return m.Type
	}
	return WorkflowJobType_Test
}

func (m *WorkflowJob) GetCreatedBy() string {
	if m != nil {
		return m.CreatedBy
	}
	return ""
}

func (m *WorkflowJob) GetCreatedTime() int64 {
	if m != nil {
		return m.CreatedTime
	}
	return 0
}

func (m *WorkflowJob) GetEnable() bool {
	if m != nil {
		return m.Enable
	}
	return false
}

func (m *WorkflowJob) GetStatus() WorkflowJobStatus {
	if m != nil {
		return m.Status
	}
	return WorkflowJobStatus_Inited
}

func (m *WorkflowJob) GetLastExecutionId() string {
	if m != nil {
		return m.LastExecutionId
	}
	return ""
}

func (m *WorkflowJob) GetLastLogId() string {
	if m != nil {
		return m.LastLogId
	}
	return ""
}

func (m *WorkflowJob) GetLastStartTime() int64 {
	if m != nil {
		return m.LastStartTime
	}
	return 0
}

func (m *WorkflowJob) GetLastStopTime() int64 {
	if m != nil {
		return m.LastStopTime
	}
	return 0
}

func (m *WorkflowJob) GetNextStartTime() int64 {
	if m != nil {
		return m.NextStartTime
	}
	return 0
}

func (m *WorkflowJob) GetRunningExecutionCount() int32 {
	if m != nil {
		return m.RunningExecutionCount
	}
	return 0
}

func (m *WorkflowJob) GetWorkspace() string {
	if m != nil {
		return m.Workspace
	}
	return ""
}

func init() {
	proto.RegisterEnum("models.WorkflowJobType", WorkflowJobType_name, WorkflowJobType_value)
	proto.RegisterEnum("models.WorkflowJobStatus", WorkflowJobStatus_name, WorkflowJobStatus_value)
	proto.RegisterType((*WorkflowJob)(nil), "models.WorkflowJob")
}

func init() {
	proto.RegisterFile("tiops/common/models/workflow_job.proto", fileDescriptor_04c94e5c97aaaf4f)
}

var fileDescriptor_04c94e5c97aaaf4f = []byte{
	// 503 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x93, 0xdf, 0x8a, 0xd3, 0x40,
	0x14, 0x87, 0x3b, 0x6d, 0x37, 0x6d, 0x4f, 0xbb, 0x6d, 0x1c, 0x70, 0x1d, 0x45, 0x4a, 0x28, 0x22,
	0x61, 0x85, 0x16, 0xff, 0xdc, 0xe8, 0x95, 0x74, 0xf1, 0x22, 0xb2, 0x20, 0xa4, 0x05, 0x2f, 0x4b,
	0x92, 0x39, 0xc6, 0x68, 0x32, 0x13, 0x92, 0x29, 0xbb, 0xbd, 0xf7, 0x21, 0xc4, 0x0b, 0xdf, 0xc5,
	0x3b, 0x2f, 0x7d, 0x04, 0xa9, 0x2f, 0x22, 0x99, 0xc9, 0xd6, 0x76, 0xed, 0xdd, 0x9c, 0xef, 0xfc,
	0x38, 0xfd, 0xa6, 0x67, 0x02, 0x8f, 0x55, 0x22, 0xf3, 0x72, 0x16, 0xc9, 0x2c, 0x93, 0x62, 0x96,
	0x49, 0x8e, 0x69, 0x39, 0xbb, 0x92, 0xc5, 0xe7, 0x0f, 0xa9, 0xbc, 0x5a, 0x7d, 0x92, 0xe1, 0x34,
	0x2f, 0xa4, 0x92, 0xd4, 0x32, 0xad, 0x07, 0xce, 0xb1, 0xbc, 0xa9, 0x4c, 0xf2, 0x78, 0x42, 0x05,
	0x71, 0x8c, 0x85, 0x49, 0x4c, 0x7e, 0xb4, 0xa1, 0xff, 0xbe, 0xfe, 0x89, 0xb7, 0x32, 0xa4, 0x0e,
	0xb4, 0x56, 0x09, 0x67, 0xc4, 0x21, 0x6e, 0x6f, 0x3e, 0xfa, 0xf6, 0xe5, 0x7b, 0x0b, 0xc2, 0x52,
	0x8a, 0x57, 0x93, 0x55, 0xc2, 0x27, 0x7e, 0xd3, 0xe3, 0x74, 0x0c, 0x70, 0xe3, 0xe4, 0x71, 0xd6,
	0xac, 0x82, 0xfe, 0x1e, 0xa1, 0x14, 0xda, 0x22, 0xc8, 0x90, 0xb5, 0x74, 0x47, 0x9f, 0x29, 0x83,
	0x4e, 0x24, 0x85, 0x42, 0xa1, 0x58, 0x5b, 0xe3, 0x9b, 0x92, 0x3e, 0x81, 0xb6, 0xda, 0xe4, 0xc8,
	0x4e, 0x1c, 0xe2, 0x0e, 0x9f, 0xdd, 0x9b, 0x1a, 0xc7, 0xe9, 0x9e, 0xd2, 0x72, 0x93, 0xa3, 0xaf,
	0x43, 0xf4, 0x21, 0xf4, 0xa2, 0x02, 0x03, 0x85, 0x7c, 0xbe, 0x61, 0x96, 0x1e, 0xf4, 0x0f, 0x50,
	0x07, 0xfa, 0x75, 0xb1, 0x4c, 0x32, 0x64, 0x1d, 0x87, 0xb8, 0x2d, 0x7f, 0x1f, 0xd1, 0x33, 0xb0,
	0x50, 0x04, 0x61, 0x8a, 0xac, 0xeb, 0x10, 0xb7, 0xeb, 0xd7, 0x15, 0x7d, 0x0a, 0x56, 0xa9, 0x02,
	0xb5, 0x2e, 0x59, 0x4f, 0x6b, 0xdc, 0x3f, 0xa2, 0xb1, 0xd0, 0x01, 0xbf, 0x0e, 0x52, 0x17, 0x46,
	0x69, 0x50, 0xaa, 0x37, 0xd7, 0x18, 0xad, 0x55, 0x22, 0x85, 0xc7, 0x19, 0x68, 0xa1, 0xdb, 0xb8,
	0x92, 0xae, 0xd0, 0xa5, 0x8c, 0x3d, 0xce, 0xfa, 0x46, 0x7a, 0x07, 0xe8, 0x23, 0x38, 0xad, 0x8a,
	0x85, 0x0a, 0x0a, 0xa5, 0xb5, 0x07, 0x5a, 0xfb, 0x10, 0xd2, 0x09, 0x0c, 0x0c, 0x90, 0xb9, 0x0e,
	0x9d, 0xea, 0xd0, 0x01, 0xab, 0x26, 0x09, 0xbc, 0xde, 0x9b, 0x34, 0x34, 0x93, 0x0e, 0x20, 0x7d,
	0x01, 0x77, 0x8b, 0xb5, 0x10, 0x89, 0x88, 0x77, 0x8e, 0x17, 0x72, 0x2d, 0x14, 0x1b, 0x39, 0xc4,
	0x3d, 0xf1, 0x8f, 0x37, 0xab, 0x3b, 0x54, 0x1b, 0x2e, 0xf3, 0x20, 0x42, 0x66, 0x9b, 0x3b, 0xec,
	0xc0, 0xf9, 0x6b, 0x18, 0xdd, 0xda, 0x17, 0xed, 0x42, 0x7b, 0x89, 0xa5, 0xb2, 0x1b, 0xd5, 0xe9,
	0x9d, 0x88, 0xd0, 0x26, 0x74, 0x00, 0xdd, 0x4b, 0x29, 0xe2, 0x25, 0x16, 0x99, 0xdd, 0xa4, 0x7d,
	0xe8, 0x5c, 0x14, 0x52, 0xa8, 0x20, 0xb4, 0x5b, 0xe7, 0x2f, 0xe1, 0xce, 0x7f, 0x7f, 0x35, 0x05,
	0xb0, 0x3c, 0x91, 0x28, 0xe4, 0x76, 0x83, 0x0e, 0x01, 0x16, 0xd1, 0x47, 0xe4, 0xeb, 0x34, 0x11,
	0xb1, 0x4d, 0xaa, 0xa9, 0x1e, 0x4f, 0xd1, 0x6e, 0xce, 0xdd, 0x9f, 0xdb, 0x31, 0xf9, 0xb5, 0x1d,
	0x93, 0xdf, 0xdb, 0x31, 0xf9, 0xfa, 0x67, 0xdc, 0x80, 0xb3, 0x44, 0x4e, 0xf5, 0xbb, 0x9f, 0xd6,
	0xdf, 0x82, 0x59, 0x66, 0x68, 0xe9, 0x17, 0xff, 0xfc, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0a,
	0x8e, 0x9d, 0x23, 0x67, 0x03, 0x00, 0x00,
}

func (m *WorkflowJob) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkflowJob) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkflowJob) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Workspace) > 0 {
		i -= len(m.Workspace)
		copy(dAtA[i:], m.Workspace)
		i = encodeVarintWorkflowJob(dAtA, i, uint64(len(m.Workspace)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.RunningExecutionCount != 0 {
		i = encodeVarintWorkflowJob(dAtA, i, uint64(m.RunningExecutionCount))
		i--
		dAtA[i] = 0x78
	}
	if m.NextStartTime != 0 {
		i = encodeVarintWorkflowJob(dAtA, i, uint64(m.NextStartTime))
		i--
		dAtA[i] = 0x70
	}
	if m.LastStopTime != 0 {
		i = encodeVarintWorkflowJob(dAtA, i, uint64(m.LastStopTime))
		i--
		dAtA[i] = 0x68
	}
	if m.LastStartTime != 0 {
		i = encodeVarintWorkflowJob(dAtA, i, uint64(m.LastStartTime))
		i--
		dAtA[i] = 0x60
	}
	if len(m.LastLogId) > 0 {
		i -= len(m.LastLogId)
		copy(dAtA[i:], m.LastLogId)
		i = encodeVarintWorkflowJob(dAtA, i, uint64(len(m.LastLogId)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.LastExecutionId) > 0 {
		i -= len(m.LastExecutionId)
		copy(dAtA[i:], m.LastExecutionId)
		i = encodeVarintWorkflowJob(dAtA, i, uint64(len(m.LastExecutionId)))
		i--
		dAtA[i] = 0x52
	}
	if m.Status != 0 {
		i = encodeVarintWorkflowJob(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x48
	}
	if m.Enable {
		i--
		if m.Enable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.CreatedTime != 0 {
		i = encodeVarintWorkflowJob(dAtA, i, uint64(m.CreatedTime))
		i--
		dAtA[i] = 0x38
	}
	if len(m.CreatedBy) > 0 {
		i -= len(m.CreatedBy)
		copy(dAtA[i:], m.CreatedBy)
		i = encodeVarintWorkflowJob(dAtA, i, uint64(len(m.CreatedBy)))
		i--
		dAtA[i] = 0x32
	}
	if m.Type != 0 {
		i = encodeVarintWorkflowJob(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintWorkflowJob(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintWorkflowJob(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.WorkflowId) > 0 {
		i -= len(m.WorkflowId)
		copy(dAtA[i:], m.WorkflowId)
		i = encodeVarintWorkflowJob(dAtA, i, uint64(len(m.WorkflowId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.XId) > 0 {
		i -= len(m.XId)
		copy(dAtA[i:], m.XId)
		i = encodeVarintWorkflowJob(dAtA, i, uint64(len(m.XId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintWorkflowJob(dAtA []byte, offset int, v uint64) int {
	offset -= sovWorkflowJob(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *WorkflowJob) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.XId)
	if l > 0 {
		n += 1 + l + sovWorkflowJob(uint64(l))
	}
	l = len(m.WorkflowId)
	if l > 0 {
		n += 1 + l + sovWorkflowJob(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovWorkflowJob(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovWorkflowJob(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovWorkflowJob(uint64(m.Type))
	}
	l = len(m.CreatedBy)
	if l > 0 {
		n += 1 + l + sovWorkflowJob(uint64(l))
	}
	if m.CreatedTime != 0 {
		n += 1 + sovWorkflowJob(uint64(m.CreatedTime))
	}
	if m.Enable {
		n += 2
	}
	if m.Status != 0 {
		n += 1 + sovWorkflowJob(uint64(m.Status))
	}
	l = len(m.LastExecutionId)
	if l > 0 {
		n += 1 + l + sovWorkflowJob(uint64(l))
	}
	l = len(m.LastLogId)
	if l > 0 {
		n += 1 + l + sovWorkflowJob(uint64(l))
	}
	if m.LastStartTime != 0 {
		n += 1 + sovWorkflowJob(uint64(m.LastStartTime))
	}
	if m.LastStopTime != 0 {
		n += 1 + sovWorkflowJob(uint64(m.LastStopTime))
	}
	if m.NextStartTime != 0 {
		n += 1 + sovWorkflowJob(uint64(m.NextStartTime))
	}
	if m.RunningExecutionCount != 0 {
		n += 1 + sovWorkflowJob(uint64(m.RunningExecutionCount))
	}
	l = len(m.Workspace)
	if l > 0 {
		n += 2 + l + sovWorkflowJob(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovWorkflowJob(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozWorkflowJob(x uint64) (n int) {
	return sovWorkflowJob(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *WorkflowJob) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflowJob
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkflowJob: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkflowJob: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field XId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflowJob
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowJob
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflowJob
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowJob
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkflowId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflowJob
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowJob
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflowJob
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowJob
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= WorkflowJobType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflowJob
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowJob
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedTime", wireType)
			}
			m.CreatedTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enable = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= WorkflowJobStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastExecutionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflowJob
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowJob
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastExecutionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastLogId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflowJob
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowJob
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastLogId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastStartTime", wireType)
			}
			m.LastStartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastStartTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastStopTime", wireType)
			}
			m.LastStopTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastStopTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextStartTime", wireType)
			}
			m.NextStartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextStartTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunningExecutionCount", wireType)
			}
			m.RunningExecutionCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RunningExecutionCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Workspace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflowJob
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowJob
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Workspace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflowJob(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWorkflowJob
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWorkflowJob(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWorkflowJob
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWorkflowJob
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWorkflowJob
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthWorkflowJob
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupWorkflowJob
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthWorkflowJob
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthWorkflowJob        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWorkflowJob          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupWorkflowJob = fmt.Errorf("proto: unexpected end of group")
)
