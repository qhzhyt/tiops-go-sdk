// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tiops/common/models/action.proto

package models

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ActionType int32

const (
	ActionType_ServiceAction  ActionType = 0
	ActionType_ExecutorAction ActionType = 1
	ActionType_BuildInAction  ActionType = 2
	ActionType_CodeAction     ActionType = 3
	//  Application = 4;
	ActionType_EngineAction   ActionType = 5
	ActionType_WorkflowAction ActionType = 6
	ActionType_CustomAction   ActionType = 7
)

var ActionType_name = map[int32]string{
	0: "ServiceAction",
	1: "ExecutorAction",
	2: "BuildInAction",
	3: "CodeAction",
	5: "EngineAction",
	6: "WorkflowAction",
	7: "CustomAction",
}

var ActionType_value = map[string]int32{
	"ServiceAction":  0,
	"ExecutorAction": 1,
	"BuildInAction":  2,
	"CodeAction":     3,
	"EngineAction":   5,
	"WorkflowAction": 6,
	"CustomAction":   7,
}

func (x ActionType) String() string {
	return proto.EnumName(ActionType_name, int32(x))
}

func (ActionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3e156f56ecac6ad0, []int{0}
}

type ActionSource int32

const (
	ActionSource_FromProject ActionSource = 0
	ActionSource_FromImage   ActionSource = 1
	ActionSource_FromOther   ActionSource = 6
)

var ActionSource_name = map[int32]string{
	0: "FromProject",
	1: "FromImage",
	6: "FromOther",
}

var ActionSource_value = map[string]int32{
	"FromProject": 0,
	"FromImage":   1,
	"FromOther":   6,
}

func (x ActionSource) String() string {
	return proto.EnumName(ActionSource_name, int32(x))
}

func (ActionSource) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3e156f56ecac6ad0, []int{1}
}

type ActionOptionItem struct {
	Label                string   `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty" bson:"label"`
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty" bson:"value"`
	Description          string   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty" bson:"description"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *ActionOptionItem) Reset()         { *m = ActionOptionItem{} }
func (m *ActionOptionItem) String() string { return proto.CompactTextString(m) }
func (*ActionOptionItem) ProtoMessage()    {}
func (*ActionOptionItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e156f56ecac6ad0, []int{0}
}
func (m *ActionOptionItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActionOptionItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActionOptionItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActionOptionItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActionOptionItem.Merge(m, src)
}
func (m *ActionOptionItem) XXX_Size() int {
	return m.Size()
}
func (m *ActionOptionItem) XXX_DiscardUnknown() {
	xxx_messageInfo_ActionOptionItem.DiscardUnknown(m)
}

var xxx_messageInfo_ActionOptionItem proto.InternalMessageInfo

func (m *ActionOptionItem) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *ActionOptionItem) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *ActionOptionItem) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type ActionOption struct {
	Name                 string              `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" bson:"name"`
	Type                 string              `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty" bson:"type"`
	Description          string              `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty" bson:"description"`
	Default              string              `protobuf:"bytes,4,opt,name=default,proto3" json:"default,omitempty" bson:"default"`
	Options              []*ActionOptionItem `protobuf:"bytes,5,rep,name=options,proto3" json:"options,omitempty" bson:"options"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-" bson:"-"`
	XXX_unrecognized     []byte              `json:"-" bson:"-"`
	XXX_sizecache        int32               `json:"-" bson:"-"`
}

func (m *ActionOption) Reset()         { *m = ActionOption{} }
func (m *ActionOption) String() string { return proto.CompactTextString(m) }
func (*ActionOption) ProtoMessage()    {}
func (*ActionOption) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e156f56ecac6ad0, []int{1}
}
func (m *ActionOption) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActionOption) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActionOption.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActionOption) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActionOption.Merge(m, src)
}
func (m *ActionOption) XXX_Size() int {
	return m.Size()
}
func (m *ActionOption) XXX_DiscardUnknown() {
	xxx_messageInfo_ActionOption.DiscardUnknown(m)
}

var xxx_messageInfo_ActionOption proto.InternalMessageInfo

func (m *ActionOption) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ActionOption) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ActionOption) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ActionOption) GetDefault() string {
	if m != nil {
		return m.Default
	}
	return ""
}

func (m *ActionOption) GetOptions() []*ActionOptionItem {
	if m != nil {
		return m.Options
	}
	return nil
}

type TestCase struct {
	Inputs               map[string]string `protobuf:"bytes,1,rep,name=inputs,proto3" json:"inputs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" bson:"inputs"`
	Outputs              map[string]string `protobuf:"bytes,2,rep,name=outputs,proto3" json:"outputs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" bson:"outputs"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-" bson:"-"`
	XXX_unrecognized     []byte            `json:"-" bson:"-"`
	XXX_sizecache        int32             `json:"-" bson:"-"`
}

func (m *TestCase) Reset()         { *m = TestCase{} }
func (m *TestCase) String() string { return proto.CompactTextString(m) }
func (*TestCase) ProtoMessage()    {}
func (*TestCase) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e156f56ecac6ad0, []int{2}
}
func (m *TestCase) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestCase) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestCase.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestCase) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestCase.Merge(m, src)
}
func (m *TestCase) XXX_Size() int {
	return m.Size()
}
func (m *TestCase) XXX_DiscardUnknown() {
	xxx_messageInfo_TestCase.DiscardUnknown(m)
}

var xxx_messageInfo_TestCase proto.InternalMessageInfo

func (m *TestCase) GetInputs() map[string]string {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *TestCase) GetOutputs() map[string]string {
	if m != nil {
		return m.Outputs
	}
	return nil
}

type SubAction struct {
	Name                 string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" bson:"name"`
	Inputs               map[string]string `protobuf:"bytes,2,rep,name=inputs,proto3" json:"inputs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" bson:"inputs"`
	Outputs              map[string]string `protobuf:"bytes,3,rep,name=outputs,proto3" json:"outputs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" bson:"outputs"`
	Description          string            `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty" bson:"description"`
	TagSelector          string            `protobuf:"bytes,5,opt,name=tagSelector,proto3" json:"tagSelector,omitempty" bson:"tagSelector"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-" bson:"-"`
	XXX_unrecognized     []byte            `json:"-" bson:"-"`
	XXX_sizecache        int32             `json:"-" bson:"-"`
}

func (m *SubAction) Reset()         { *m = SubAction{} }
func (m *SubAction) String() string { return proto.CompactTextString(m) }
func (*SubAction) ProtoMessage()    {}
func (*SubAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e156f56ecac6ad0, []int{3}
}
func (m *SubAction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubAction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubAction.Merge(m, src)
}
func (m *SubAction) XXX_Size() int {
	return m.Size()
}
func (m *SubAction) XXX_DiscardUnknown() {
	xxx_messageInfo_SubAction.DiscardUnknown(m)
}

var xxx_messageInfo_SubAction proto.InternalMessageInfo

func (m *SubAction) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SubAction) GetInputs() map[string]string {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *SubAction) GetOutputs() map[string]string {
	if m != nil {
		return m.Outputs
	}
	return nil
}

func (m *SubAction) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *SubAction) GetTagSelector() string {
	if m != nil {
		return m.TagSelector
	}
	return ""
}

type ActionSelector struct {
	Tags                 []string     `protobuf:"bytes,1,rep,name=tags,proto3" json:"tags,omitempty" bson:"tags"`
	Types                []ActionType `protobuf:"varint,2,rep,packed,name=types,proto3,enum=models.ActionType" json:"types,omitempty" bson:"types"`
	Langs                []string     `protobuf:"bytes,3,rep,name=langs,proto3" json:"langs,omitempty" bson:"langs"`
	ExcludeTags          []string     `protobuf:"bytes,4,rep,name=excludeTags,proto3" json:"excludeTags,omitempty" bson:"excludeTags"`
	ExcludeTypes         []string     `protobuf:"bytes,5,rep,name=excludeTypes,proto3" json:"excludeTypes,omitempty" bson:"excludeTypes"`
	ExcludeLangs         []string     `protobuf:"bytes,6,rep,name=excludeLangs,proto3" json:"excludeLangs,omitempty" bson:"excludeLangs"`
	Names                []string     `protobuf:"bytes,7,rep,name=names,proto3" json:"names,omitempty" bson:"names"`
	ExcludeNames         []string     `protobuf:"bytes,8,rep,name=excludeNames,proto3" json:"excludeNames,omitempty" bson:"excludeNames"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-" bson:"-"`
	XXX_unrecognized     []byte       `json:"-" bson:"-"`
	XXX_sizecache        int32        `json:"-" bson:"-"`
}

func (m *ActionSelector) Reset()         { *m = ActionSelector{} }
func (m *ActionSelector) String() string { return proto.CompactTextString(m) }
func (*ActionSelector) ProtoMessage()    {}
func (*ActionSelector) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e156f56ecac6ad0, []int{4}
}
func (m *ActionSelector) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActionSelector) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActionSelector.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActionSelector) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActionSelector.Merge(m, src)
}
func (m *ActionSelector) XXX_Size() int {
	return m.Size()
}
func (m *ActionSelector) XXX_DiscardUnknown() {
	xxx_messageInfo_ActionSelector.DiscardUnknown(m)
}

var xxx_messageInfo_ActionSelector proto.InternalMessageInfo

func (m *ActionSelector) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *ActionSelector) GetTypes() []ActionType {
	if m != nil {
		return m.Types
	}
	return nil
}

func (m *ActionSelector) GetLangs() []string {
	if m != nil {
		return m.Langs
	}
	return nil
}

func (m *ActionSelector) GetExcludeTags() []string {
	if m != nil {
		return m.ExcludeTags
	}
	return nil
}

func (m *ActionSelector) GetExcludeTypes() []string {
	if m != nil {
		return m.ExcludeTypes
	}
	return nil
}

func (m *ActionSelector) GetExcludeLangs() []string {
	if m != nil {
		return m.ExcludeLangs
	}
	return nil
}

func (m *ActionSelector) GetNames() []string {
	if m != nil {
		return m.Names
	}
	return nil
}

func (m *ActionSelector) GetExcludeNames() []string {
	if m != nil {
		return m.ExcludeNames
	}
	return nil
}

type StatusViewConfig struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" bson:"name"`
	Label                string   `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty" bson:"label"`
	Type                 string   `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty" bson:"type"`
	Template             string   `protobuf:"bytes,4,opt,name=template,proto3" json:"template,omitempty" bson:"template"`
	UpdateFunc           string   `protobuf:"bytes,5,opt,name=updateFunc,proto3" json:"updateFunc,omitempty" bson:"updateFunc"`
	Width                string   `protobuf:"bytes,6,opt,name=width,proto3" json:"width,omitempty" bson:"width"`
	Height               string   `protobuf:"bytes,7,opt,name=height,proto3" json:"height,omitempty" bson:"height"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *StatusViewConfig) Reset()         { *m = StatusViewConfig{} }
func (m *StatusViewConfig) String() string { return proto.CompactTextString(m) }
func (*StatusViewConfig) ProtoMessage()    {}
func (*StatusViewConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e156f56ecac6ad0, []int{5}
}
func (m *StatusViewConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatusViewConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StatusViewConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StatusViewConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusViewConfig.Merge(m, src)
}
func (m *StatusViewConfig) XXX_Size() int {
	return m.Size()
}
func (m *StatusViewConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusViewConfig.DiscardUnknown(m)
}

var xxx_messageInfo_StatusViewConfig proto.InternalMessageInfo

func (m *StatusViewConfig) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *StatusViewConfig) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *StatusViewConfig) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *StatusViewConfig) GetTemplate() string {
	if m != nil {
		return m.Template
	}
	return ""
}

func (m *StatusViewConfig) GetUpdateFunc() string {
	if m != nil {
		return m.UpdateFunc
	}
	return ""
}

func (m *StatusViewConfig) GetWidth() string {
	if m != nil {
		return m.Width
	}
	return ""
}

func (m *StatusViewConfig) GetHeight() string {
	if m != nil {
		return m.Height
	}
	return ""
}

type ActionDisplayConfig struct {
	NodeContentTemplate  string              `protobuf:"bytes,1,opt,name=nodeContentTemplate,proto3" json:"nodeContentTemplate,omitempty" bson:"nodeContentTemplate"`
	StatusViewConfigs    []*StatusViewConfig `protobuf:"bytes,2,rep,name=statusViewConfigs,proto3" json:"statusViewConfigs,omitempty" bson:"statusViewConfigs"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-" bson:"-"`
	XXX_unrecognized     []byte              `json:"-" bson:"-"`
	XXX_sizecache        int32               `json:"-" bson:"-"`
}

func (m *ActionDisplayConfig) Reset()         { *m = ActionDisplayConfig{} }
func (m *ActionDisplayConfig) String() string { return proto.CompactTextString(m) }
func (*ActionDisplayConfig) ProtoMessage()    {}
func (*ActionDisplayConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e156f56ecac6ad0, []int{6}
}
func (m *ActionDisplayConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActionDisplayConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActionDisplayConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActionDisplayConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActionDisplayConfig.Merge(m, src)
}
func (m *ActionDisplayConfig) XXX_Size() int {
	return m.Size()
}
func (m *ActionDisplayConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ActionDisplayConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ActionDisplayConfig proto.InternalMessageInfo

func (m *ActionDisplayConfig) GetNodeContentTemplate() string {
	if m != nil {
		return m.NodeContentTemplate
	}
	return ""
}

func (m *ActionDisplayConfig) GetStatusViewConfigs() []*StatusViewConfig {
	if m != nil {
		return m.StatusViewConfigs
	}
	return nil
}

type ActionInfo struct {
	XId                  string               `protobuf:"bytes,1,opt,name=_id,json=Id,proto3" json:"_id,omitempty" bson:"_id"`
	Name                 string               `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" bson:"name"`
	Type                 ActionType           `protobuf:"varint,3,opt,name=type,proto3,enum=models.ActionType" json:"type,omitempty" bson:"type"`
	Source               ActionSource         `protobuf:"varint,4,opt,name=source,proto3,enum=models.ActionSource" json:"source,omitempty" bson:"source"`
	ProjectId            string               `protobuf:"bytes,5,opt,name=projectId,proto3" json:"projectId,omitempty" bson:"projectId"`
	Image                string               `protobuf:"bytes,6,opt,name=image,proto3" json:"image,omitempty" bson:"image"`
	CreatedBy            string               `protobuf:"bytes,7,opt,name=createdBy,proto3" json:"createdBy,omitempty" bson:"createdBy"`
	Description          string               `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty" bson:"description"`
	Path                 string               `protobuf:"bytes,9,opt,name=path,proto3" json:"path,omitempty" bson:"path"`
	Func                 string               `protobuf:"bytes,10,opt,name=func,proto3" json:"func,omitempty" bson:"func"`
	BatchFunc            string               `protobuf:"bytes,11,opt,name=batchFunc,proto3" json:"batchFunc,omitempty" bson:"batchFunc"`
	Class                string               `protobuf:"bytes,12,opt,name=class,proto3" json:"class,omitempty" bson:"class"`
	Inputs               []*Parameter         `protobuf:"bytes,13,rep,name=inputs,proto3" json:"inputs,omitempty" bson:"inputs"`
	Outputs              []*Parameter         `protobuf:"bytes,14,rep,name=outputs,proto3" json:"outputs,omitempty" bson:"outputs"`
	SubActions           []*SubAction         `protobuf:"bytes,15,rep,name=subActions,proto3" json:"subActions,omitempty" bson:"subActions"`
	Options              []*ActionOption      `protobuf:"bytes,16,rep,name=options,proto3" json:"options,omitempty" bson:"options"`
	TestCases            []*TestCase          `protobuf:"bytes,17,rep,name=testCases,proto3" json:"testCases,omitempty" bson:"testCases"`
	Lang                 string               `protobuf:"bytes,18,opt,name=lang,proto3" json:"lang,omitempty" bson:"lang"`
	Code                 string               `protobuf:"bytes,19,opt,name=code,proto3" json:"code,omitempty" bson:"code"`
	IsPublic             bool                 `protobuf:"varint,20,opt,name=isPublic,proto3" json:"isPublic,omitempty" bson:"isPublic"`
	Tags                 []string             `protobuf:"bytes,21,rep,name=tags,proto3" json:"tags,omitempty" bson:"tags"`
	Readme               string               `protobuf:"bytes,22,opt,name=readme,proto3" json:"readme,omitempty" bson:"readme"`
	Extra                map[string]string    `protobuf:"bytes,23,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" bson:"extra"`
	Icon                 string               `protobuf:"bytes,24,opt,name=icon,proto3" json:"icon,omitempty" bson:"icon"`
	ActionSelector       *ActionSelector      `protobuf:"bytes,25,opt,name=actionSelector,proto3" json:"actionSelector,omitempty" bson:"actionSelector"`
	DisplayConfig        *ActionDisplayConfig `protobuf:"bytes,26,opt,name=displayConfig,proto3" json:"displayConfig,omitempty" bson:"displayConfig"`
	EngineExtraOptions   []*ActionOption      `protobuf:"bytes,27,rep,name=engineExtraOptions,proto3" json:"engineExtraOptions,omitempty" bson:"engineExtraOptions"`
	CreatedTime          int64                `protobuf:"varint,28,opt,name=createdTime,proto3" json:"createdTime,omitempty" bson:"createdTime"`
	UpdatedTime          int64                `protobuf:"varint,29,opt,name=updatedTime,proto3" json:"updatedTime,omitempty" bson:"updatedTime"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-" bson:"-"`
	XXX_unrecognized     []byte               `json:"-" bson:"-"`
	XXX_sizecache        int32                `json:"-" bson:"-"`
}

func (m *ActionInfo) Reset()         { *m = ActionInfo{} }
func (m *ActionInfo) String() string { return proto.CompactTextString(m) }
func (*ActionInfo) ProtoMessage()    {}
func (*ActionInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e156f56ecac6ad0, []int{7}
}
func (m *ActionInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActionInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActionInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActionInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActionInfo.Merge(m, src)
}
func (m *ActionInfo) XXX_Size() int {
	return m.Size()
}
func (m *ActionInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ActionInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ActionInfo proto.InternalMessageInfo

func (m *ActionInfo) GetXId() string {
	if m != nil {
		return m.XId
	}
	return ""
}

func (m *ActionInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ActionInfo) GetType() ActionType {
	if m != nil {
		return m.Type
	}
	return ActionType_ServiceAction
}

func (m *ActionInfo) GetSource() ActionSource {
	if m != nil {
		return m.Source
	}
	return ActionSource_FromProject
}

func (m *ActionInfo) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *ActionInfo) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *ActionInfo) GetCreatedBy() string {
	if m != nil {
		return m.CreatedBy
	}
	return ""
}

func (m *ActionInfo) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ActionInfo) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *ActionInfo) GetFunc() string {
	if m != nil {
		return m.Func
	}
	return ""
}

func (m *ActionInfo) GetBatchFunc() string {
	if m != nil {
		return m.BatchFunc
	}
	return ""
}

func (m *ActionInfo) GetClass() string {
	if m != nil {
		return m.Class
	}
	return ""
}

func (m *ActionInfo) GetInputs() []*Parameter {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *ActionInfo) GetOutputs() []*Parameter {
	if m != nil {
		return m.Outputs
	}
	return nil
}

func (m *ActionInfo) GetSubActions() []*SubAction {
	if m != nil {
		return m.SubActions
	}
	return nil
}

func (m *ActionInfo) GetOptions() []*ActionOption {
	if m != nil {
		return m.Options
	}
	return nil
}

func (m *ActionInfo) GetTestCases() []*TestCase {
	if m != nil {
		return m.TestCases
	}
	return nil
}

func (m *ActionInfo) GetLang() string {
	if m != nil {
		return m.Lang
	}
	return ""
}

func (m *ActionInfo) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *ActionInfo) GetIsPublic() bool {
	if m != nil {
		return m.IsPublic
	}
	return false
}

func (m *ActionInfo) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *ActionInfo) GetReadme() string {
	if m != nil {
		return m.Readme
	}
	return ""
}

func (m *ActionInfo) GetExtra() map[string]string {
	if m != nil {
		return m.Extra
	}
	return nil
}

func (m *ActionInfo) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *ActionInfo) GetActionSelector() *ActionSelector {
	if m != nil {
		return m.ActionSelector
	}
	return nil
}

func (m *ActionInfo) GetDisplayConfig() *ActionDisplayConfig {
	if m != nil {
		return m.DisplayConfig
	}
	return nil
}

func (m *ActionInfo) GetEngineExtraOptions() []*ActionOption {
	if m != nil {
		return m.EngineExtraOptions
	}
	return nil
}

func (m *ActionInfo) GetCreatedTime() int64 {
	if m != nil {
		return m.CreatedTime
	}
	return 0
}

func (m *ActionInfo) GetUpdatedTime() int64 {
	if m != nil {
		return m.UpdatedTime
	}
	return 0
}

func init() {
	proto.RegisterEnum("models.ActionType", ActionType_name, ActionType_value)
	proto.RegisterEnum("models.ActionSource", ActionSource_name, ActionSource_value)
	proto.RegisterType((*ActionOptionItem)(nil), "models.ActionOptionItem")
	proto.RegisterType((*ActionOption)(nil), "models.ActionOption")
	proto.RegisterType((*TestCase)(nil), "models.TestCase")
	proto.RegisterMapType((map[string]string)(nil), "models.TestCase.InputsEntry")
	proto.RegisterMapType((map[string]string)(nil), "models.TestCase.OutputsEntry")
	proto.RegisterType((*SubAction)(nil), "models.SubAction")
	proto.RegisterMapType((map[string]string)(nil), "models.SubAction.InputsEntry")
	proto.RegisterMapType((map[string]string)(nil), "models.SubAction.OutputsEntry")
	proto.RegisterType((*ActionSelector)(nil), "models.ActionSelector")
	proto.RegisterType((*StatusViewConfig)(nil), "models.StatusViewConfig")
	proto.RegisterType((*ActionDisplayConfig)(nil), "models.ActionDisplayConfig")
	proto.RegisterType((*ActionInfo)(nil), "models.ActionInfo")
	proto.RegisterMapType((map[string]string)(nil), "models.ActionInfo.ExtraEntry")
}

func init() { proto.RegisterFile("tiops/common/models/action.proto", fileDescriptor_3e156f56ecac6ad0) }

var fileDescriptor_3e156f56ecac6ad0 = []byte{
	// 1154 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x56, 0x4d, 0x6f, 0xe3, 0x44,
	0x18, 0x5e, 0x27, 0xcd, 0xd7, 0x9b, 0x36, 0x4d, 0xa7, 0xa5, 0x0c, 0xd9, 0x6e, 0x14, 0xe5, 0x80,
	0xc2, 0x82, 0x52, 0xe8, 0x82, 0x28, 0x95, 0x40, 0xda, 0x76, 0x5b, 0x29, 0x12, 0xa2, 0x95, 0x5b,
	0xc1, 0x71, 0x99, 0xd8, 0xd3, 0xc4, 0xac, 0xed, 0xb1, 0xec, 0xf1, 0xb6, 0xb9, 0x73, 0xe0, 0x04,
	0x57, 0xc4, 0x81, 0x23, 0x3f, 0x82, 0x5f, 0x80, 0xc4, 0x05, 0x89, 0x3f, 0x80, 0xca, 0x1f, 0xe0,
	0x27, 0xa0, 0x99, 0xd7, 0x76, 0xec, 0xd4, 0x80, 0xf6, 0xc4, 0xc5, 0x9a, 0xf7, 0x99, 0xe7, 0x9d,
	0x8f, 0x67, 0xde, 0x79, 0xc6, 0x30, 0x90, 0x8e, 0x08, 0xa2, 0x7d, 0x4b, 0x78, 0x9e, 0xf0, 0xf7,
	0x3d, 0x61, 0x73, 0x37, 0xda, 0x67, 0x96, 0x74, 0x84, 0x3f, 0x0e, 0x42, 0x21, 0x05, 0xa9, 0x23,
	0xd8, 0x2b, 0x65, 0x62, 0x84, 0xcc, 0x72, 0x86, 0x64, 0xb3, 0x19, 0x0f, 0x91, 0x31, 0xfc, 0x12,
	0xba, 0x4f, 0xf5, 0xd8, 0xe7, 0x81, 0xfa, 0x4e, 0x24, 0xf7, 0xc8, 0x0e, 0xd4, 0x5c, 0x36, 0xe5,
	0x2e, 0x35, 0x06, 0xc6, 0xa8, 0x65, 0x62, 0xa0, 0xd0, 0x97, 0xcc, 0x8d, 0x39, 0xad, 0x20, 0xaa,
	0x03, 0x32, 0x80, 0xb6, 0xcd, 0x23, 0x2b, 0x74, 0x74, 0x3a, 0xad, 0xea, 0xbe, 0x3c, 0x34, 0xfc,
	0xc9, 0x80, 0xf5, 0xfc, 0x14, 0x84, 0xc0, 0x9a, 0xcf, 0x3c, 0x9e, 0x8c, 0xae, 0xdb, 0x0a, 0x93,
	0x8b, 0x20, 0x1d, 0x5b, 0xb7, 0xff, 0x7b, 0x68, 0x42, 0xa1, 0x61, 0xf3, 0x6b, 0x16, 0xbb, 0x92,
	0xae, 0xe9, 0xde, 0x34, 0x24, 0x07, 0xd0, 0x10, 0x9a, 0x13, 0xd1, 0xda, 0xa0, 0x3a, 0x6a, 0x1f,
	0xd0, 0x31, 0xee, 0x7e, 0xbc, 0xba, 0x5b, 0x33, 0x25, 0x0e, 0xff, 0x32, 0xa0, 0x79, 0xc5, 0x23,
	0x79, 0xc2, 0x22, 0x4e, 0xde, 0x87, 0xba, 0xe3, 0x07, 0xb1, 0x8c, 0xa8, 0xa1, 0xf3, 0xf7, 0xd2,
	0xfc, 0x94, 0x31, 0x9e, 0xe8, 0xee, 0x53, 0x5f, 0x86, 0x0b, 0x33, 0xe1, 0x92, 0x0f, 0xa1, 0x21,
	0x62, 0xa9, 0xd3, 0x2a, 0x3a, 0xed, 0xd1, 0xbd, 0xb4, 0x73, 0xec, 0xc7, 0xbc, 0x94, 0xdd, 0xfb,
	0x08, 0xda, 0xb9, 0xf1, 0x48, 0x17, 0xaa, 0x2f, 0xf8, 0x22, 0x51, 0x48, 0x35, 0xcb, 0xd5, 0x3f,
	0xaa, 0x1c, 0x1a, 0xbd, 0x23, 0x58, 0xcf, 0x8f, 0xf9, 0x2a, 0xb9, 0xc3, 0x5f, 0x2b, 0xd0, 0xba,
	0x8c, 0xa7, 0xa8, 0x49, 0xe9, 0xc1, 0x7c, 0x90, 0xe9, 0xb0, 0xb2, 0xa1, 0x2c, 0xad, 0x54, 0x88,
	0xc3, 0xa5, 0x10, 0x55, 0x9d, 0xd7, 0xbf, 0x9f, 0x57, 0xaa, 0xc4, 0xea, 0xa9, 0xaf, 0xdd, 0x3f,
	0xf5, 0x01, 0xb4, 0x25, 0x9b, 0x5d, 0x72, 0x97, 0x5b, 0x52, 0x84, 0xb4, 0x86, 0x8c, 0x1c, 0xf4,
	0x7f, 0xa9, 0xf9, 0x4d, 0x05, 0x3a, 0xb8, 0xb7, 0x74, 0x25, 0xba, 0xae, 0xd9, 0x0c, 0x8b, 0x48,
	0xd5, 0x35, 0x9b, 0x45, 0x64, 0x04, 0x35, 0x55, 0xdf, 0xa8, 0x68, 0xe7, 0x80, 0x14, 0x2b, 0xf3,
	0x6a, 0x11, 0x70, 0x13, 0x09, 0x78, 0x11, 0xfd, 0x19, 0x6a, 0xa8, 0x2f, 0xa2, 0x3f, 0xd3, 0x0a,
	0xf1, 0x5b, 0xcb, 0x8d, 0x6d, 0x7e, 0xa5, 0x86, 0x5e, 0xd3, 0x7d, 0x79, 0x88, 0x0c, 0x61, 0x3d,
	0x0d, 0xf5, 0x44, 0x35, 0x4d, 0x29, 0x60, 0x39, 0xce, 0xa7, 0x7a, 0x8a, 0x7a, 0x81, 0xa3, 0x31,
	0x35, 0xbf, 0x2a, 0x82, 0x88, 0x36, 0x70, 0x7e, 0x1d, 0xe4, 0x32, 0x3f, 0xd3, 0x9d, 0xcd, 0x42,
	0xa6, 0xc6, 0x86, 0x3f, 0x1b, 0xd0, 0xbd, 0x94, 0x4c, 0xc6, 0xd1, 0xe7, 0x0e, 0xbf, 0x39, 0x11,
	0xfe, 0xb5, 0x33, 0x2b, 0xad, 0xaf, 0xcc, 0x6b, 0x2a, 0x79, 0xaf, 0x49, 0xed, 0xa0, 0x9a, 0xb3,
	0x83, 0x1e, 0x34, 0x25, 0xf7, 0x02, 0x97, 0x49, 0x9e, 0x54, 0x45, 0x16, 0x93, 0x3e, 0x40, 0x1c,
	0xd8, 0x4c, 0xf2, 0xb3, 0xd8, 0xb7, 0x92, 0x8a, 0xc8, 0x21, 0x6a, 0x96, 0x1b, 0xc7, 0x96, 0x73,
	0x5a, 0xc7, 0x59, 0x74, 0x40, 0x76, 0xa1, 0x3e, 0xe7, 0xce, 0x6c, 0x2e, 0x69, 0x43, 0xc3, 0x49,
	0x34, 0xfc, 0xce, 0x80, 0x6d, 0x3c, 0x8c, 0x67, 0x4e, 0x14, 0xb8, 0x6c, 0x91, 0xac, 0xff, 0x5d,
	0xd8, 0xf6, 0x85, 0xcd, 0x4f, 0x84, 0x2f, 0xb9, 0x2f, 0xaf, 0xd2, 0xc5, 0xe0, 0x76, 0xca, 0xba,
	0xc8, 0x19, 0x6c, 0x45, 0x2b, 0x2a, 0xa4, 0x17, 0x29, 0x33, 0xa4, 0x55, 0x99, 0xcc, 0xfb, 0x29,
	0xc3, 0xdf, 0x9b, 0x00, 0xb8, 0xa2, 0x89, 0x7f, 0x2d, 0xc8, 0x00, 0xaa, 0xcf, 0x1d, 0x1b, 0x27,
	0x3e, 0xde, 0xfc, 0xe1, 0xeb, 0x1f, 0xab, 0x30, 0x8d, 0x84, 0x7f, 0x34, 0x7c, 0xee, 0xd8, 0x43,
	0xb3, 0x32, 0xb1, 0x33, 0xa9, 0x2b, 0x39, 0xa9, 0xdf, 0xcc, 0x89, 0x5a, 0x5e, 0x76, 0x28, 0xf4,
	0x3b, 0x50, 0x8f, 0x44, 0x1c, 0x5a, 0x28, 0x73, 0xe7, 0x60, 0xa7, 0xc8, 0xbc, 0xd4, 0x7d, 0x66,
	0xc2, 0x21, 0x7b, 0xd0, 0x0a, 0x42, 0xf1, 0x15, 0xb7, 0xe4, 0xc4, 0x4e, 0x94, 0x5f, 0x02, 0x4a,
	0x78, 0xc7, 0x63, 0x33, 0x9e, 0x0a, 0xaf, 0x03, 0x95, 0x63, 0x85, 0x9c, 0x49, 0x6e, 0x1f, 0x2f,
	0x12, 0xed, 0x97, 0xc0, 0xaa, 0x03, 0x34, 0xef, 0x3b, 0x00, 0x81, 0xb5, 0x80, 0xc9, 0x39, 0x6d,
	0xe1, 0xee, 0x54, 0x5b, 0x61, 0xd7, 0xea, 0xf0, 0x01, 0x31, 0xd5, 0x56, 0xf3, 0x4c, 0x99, 0xb4,
	0xe6, 0xba, 0x2a, 0xda, 0x38, 0x4f, 0x06, 0xa8, 0xb5, 0x59, 0x2e, 0x8b, 0x22, 0xba, 0x8e, 0x6b,
	0xd3, 0x01, 0x79, 0x2b, 0x33, 0xbc, 0x0d, 0x7d, 0x4e, 0x5b, 0xe9, 0xee, 0x2f, 0x58, 0xc8, 0x3c,
	0x2e, 0x79, 0x98, 0x99, 0xdc, 0xdb, 0x4b, 0x93, 0xeb, 0xfc, 0x13, 0x37, 0xf3, 0xb5, 0xf7, 0x00,
	0xa2, 0xd4, 0xfa, 0x22, 0xba, 0x59, 0xe4, 0x67, 0xa6, 0x68, 0xe6, 0x48, 0x64, 0xbc, 0x7c, 0xc4,
	0xba, 0x9a, 0xbf, 0x53, 0xf6, 0x88, 0x65, 0x0f, 0x18, 0x19, 0x43, 0x4b, 0x26, 0xcf, 0x4c, 0x44,
	0xb7, 0x74, 0x46, 0x77, 0xf5, 0xfd, 0x31, 0x97, 0x14, 0x25, 0x99, 0x72, 0x14, 0x4a, 0x50, 0x32,
	0xd5, 0x56, 0x98, 0x25, 0x6c, 0x4e, 0xb7, 0x11, 0x53, 0x6d, 0x75, 0xf3, 0x9c, 0xe8, 0x22, 0x9e,
	0xba, 0x8e, 0x45, 0x77, 0x06, 0xc6, 0xa8, 0x69, 0x66, 0x71, 0x66, 0x70, 0xaf, 0xe5, 0x0c, 0x6e,
	0x17, 0xea, 0x21, 0x67, 0xb6, 0xc7, 0xe9, 0x2e, 0xde, 0x2b, 0x8c, 0xc8, 0x13, 0xa8, 0xf1, 0x5b,
	0x19, 0x32, 0xfa, 0x7a, 0xf1, 0x29, 0x59, 0x56, 0xf6, 0xf8, 0x54, 0xf5, 0xe3, 0x8b, 0x80, 0x5c,
	0x35, 0x81, 0x63, 0x09, 0x9f, 0x52, 0x5c, 0x90, 0x6a, 0x93, 0x4f, 0xa0, 0xc3, 0x0a, 0x3e, 0x4b,
	0xdf, 0x18, 0x18, 0xa3, 0xf6, 0xc1, 0xee, 0x4a, 0xa5, 0x26, 0xbd, 0xe6, 0x0a, 0x9b, 0x3c, 0x85,
	0x0d, 0x3b, 0x7f, 0xb3, 0x69, 0x4f, 0xa7, 0x3f, 0x2c, 0xa6, 0x17, 0x2e, 0xbf, 0x59, 0xcc, 0x20,
	0xcf, 0x80, 0x70, 0x7f, 0xe6, 0xf8, 0x5c, 0xaf, 0xf8, 0x3c, 0x39, 0xa6, 0x87, 0xff, 0x72, 0x4c,
	0x25, 0x7c, 0x55, 0xea, 0x49, 0xdd, 0x5f, 0x39, 0x1e, 0xa7, 0x7b, 0x03, 0x63, 0x54, 0x35, 0xf3,
	0x90, 0x62, 0xa0, 0x8f, 0x21, 0xe3, 0x11, 0x32, 0x72, 0x50, 0xef, 0x10, 0x60, 0xa9, 0xda, 0xab,
	0xbc, 0x57, 0x8f, 0xbf, 0x35, 0x52, 0x57, 0x51, 0xb7, 0x9f, 0x6c, 0xc1, 0xc6, 0x25, 0x0f, 0x5f,
	0x3a, 0x16, 0x47, 0xb0, 0xfb, 0x80, 0x10, 0xe8, 0x9c, 0xde, 0x72, 0x2b, 0x96, 0x22, 0x4c, 0x30,
	0x43, 0xd1, 0x8e, 0x63, 0xc7, 0xb5, 0x27, 0x7e, 0x02, 0x55, 0x48, 0x07, 0xe0, 0x44, 0xd8, 0x69,
	0x5a, 0x95, 0x74, 0x61, 0xfd, 0x54, 0x6f, 0x36, 0x41, 0x6a, 0x6a, 0xa0, 0x2f, 0x44, 0xf8, 0xe2,
	0xda, 0x15, 0x37, 0x09, 0x56, 0x57, 0xac, 0x93, 0x38, 0x92, 0xc2, 0x4b, 0x90, 0xc6, 0xe3, 0x8f,
	0xd3, 0x3f, 0x45, 0xf4, 0x18, 0xb2, 0x09, 0xed, 0xb3, 0x50, 0x78, 0x17, 0x68, 0x27, 0xdd, 0x07,
	0x64, 0x03, 0x5a, 0x0a, 0x98, 0x28, 0x17, 0xe9, 0x1a, 0x69, 0x78, 0x2e, 0xe7, 0x3c, 0xec, 0xd6,
	0x8f, 0x47, 0xbf, 0xdc, 0xf5, 0x8d, 0xdf, 0xee, 0xfa, 0xc6, 0x1f, 0x77, 0x7d, 0xe3, 0xfb, 0x3f,
	0xfb, 0x0f, 0x60, 0xd7, 0x11, 0x63, 0xfd, 0x0b, 0x3c, 0x4e, 0x7e, 0x8b, 0xf1, 0x60, 0xa6, 0x75,
	0xfd, 0xf3, 0xfb, 0xe4, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc1, 0x15, 0xf8, 0xec, 0x6c, 0x0b,
	0x00, 0x00,
}

func (m *ActionOptionItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActionOptionItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActionOptionItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintAction(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintAction(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Label) > 0 {
		i -= len(m.Label)
		copy(dAtA[i:], m.Label)
		i = encodeVarintAction(dAtA, i, uint64(len(m.Label)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ActionOption) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActionOption) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActionOption) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Options) > 0 {
		for iNdEx := len(m.Options) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Options[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAction(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Default) > 0 {
		i -= len(m.Default)
		copy(dAtA[i:], m.Default)
		i = encodeVarintAction(dAtA, i, uint64(len(m.Default)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintAction(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintAction(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintAction(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TestCase) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestCase) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestCase) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Outputs) > 0 {
		for k := range m.Outputs {
			v := m.Outputs[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintAction(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintAction(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintAction(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Inputs) > 0 {
		for k := range m.Inputs {
			v := m.Inputs[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintAction(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintAction(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintAction(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SubAction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubAction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubAction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TagSelector) > 0 {
		i -= len(m.TagSelector)
		copy(dAtA[i:], m.TagSelector)
		i = encodeVarintAction(dAtA, i, uint64(len(m.TagSelector)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintAction(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Outputs) > 0 {
		for k := range m.Outputs {
			v := m.Outputs[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintAction(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintAction(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintAction(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Inputs) > 0 {
		for k := range m.Inputs {
			v := m.Inputs[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintAction(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintAction(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintAction(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintAction(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ActionSelector) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActionSelector) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActionSelector) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ExcludeNames) > 0 {
		for iNdEx := len(m.ExcludeNames) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ExcludeNames[iNdEx])
			copy(dAtA[i:], m.ExcludeNames[iNdEx])
			i = encodeVarintAction(dAtA, i, uint64(len(m.ExcludeNames[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.Names) > 0 {
		for iNdEx := len(m.Names) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Names[iNdEx])
			copy(dAtA[i:], m.Names[iNdEx])
			i = encodeVarintAction(dAtA, i, uint64(len(m.Names[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.ExcludeLangs) > 0 {
		for iNdEx := len(m.ExcludeLangs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ExcludeLangs[iNdEx])
			copy(dAtA[i:], m.ExcludeLangs[iNdEx])
			i = encodeVarintAction(dAtA, i, uint64(len(m.ExcludeLangs[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.ExcludeTypes) > 0 {
		for iNdEx := len(m.ExcludeTypes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ExcludeTypes[iNdEx])
			copy(dAtA[i:], m.ExcludeTypes[iNdEx])
			i = encodeVarintAction(dAtA, i, uint64(len(m.ExcludeTypes[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.ExcludeTags) > 0 {
		for iNdEx := len(m.ExcludeTags) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ExcludeTags[iNdEx])
			copy(dAtA[i:], m.ExcludeTags[iNdEx])
			i = encodeVarintAction(dAtA, i, uint64(len(m.ExcludeTags[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Langs) > 0 {
		for iNdEx := len(m.Langs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Langs[iNdEx])
			copy(dAtA[i:], m.Langs[iNdEx])
			i = encodeVarintAction(dAtA, i, uint64(len(m.Langs[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Types) > 0 {
		dAtA2 := make([]byte, len(m.Types)*10)
		var j1 int
		for _, num := range m.Types {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintAction(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Tags) > 0 {
		for iNdEx := len(m.Tags) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Tags[iNdEx])
			copy(dAtA[i:], m.Tags[iNdEx])
			i = encodeVarintAction(dAtA, i, uint64(len(m.Tags[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *StatusViewConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatusViewConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StatusViewConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Height) > 0 {
		i -= len(m.Height)
		copy(dAtA[i:], m.Height)
		i = encodeVarintAction(dAtA, i, uint64(len(m.Height)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Width) > 0 {
		i -= len(m.Width)
		copy(dAtA[i:], m.Width)
		i = encodeVarintAction(dAtA, i, uint64(len(m.Width)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.UpdateFunc) > 0 {
		i -= len(m.UpdateFunc)
		copy(dAtA[i:], m.UpdateFunc)
		i = encodeVarintAction(dAtA, i, uint64(len(m.UpdateFunc)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Template) > 0 {
		i -= len(m.Template)
		copy(dAtA[i:], m.Template)
		i = encodeVarintAction(dAtA, i, uint64(len(m.Template)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintAction(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Label) > 0 {
		i -= len(m.Label)
		copy(dAtA[i:], m.Label)
		i = encodeVarintAction(dAtA, i, uint64(len(m.Label)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintAction(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ActionDisplayConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActionDisplayConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActionDisplayConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.StatusViewConfigs) > 0 {
		for iNdEx := len(m.StatusViewConfigs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StatusViewConfigs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAction(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.NodeContentTemplate) > 0 {
		i -= len(m.NodeContentTemplate)
		copy(dAtA[i:], m.NodeContentTemplate)
		i = encodeVarintAction(dAtA, i, uint64(len(m.NodeContentTemplate)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ActionInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActionInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActionInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UpdatedTime != 0 {
		i = encodeVarintAction(dAtA, i, uint64(m.UpdatedTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe8
	}
	if m.CreatedTime != 0 {
		i = encodeVarintAction(dAtA, i, uint64(m.CreatedTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe0
	}
	if len(m.EngineExtraOptions) > 0 {
		for iNdEx := len(m.EngineExtraOptions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EngineExtraOptions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAction(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xda
		}
	}
	if m.DisplayConfig != nil {
		{
			size, err := m.DisplayConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAction(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	if m.ActionSelector != nil {
		{
			size, err := m.ActionSelector.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAction(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	if len(m.Icon) > 0 {
		i -= len(m.Icon)
		copy(dAtA[i:], m.Icon)
		i = encodeVarintAction(dAtA, i, uint64(len(m.Icon)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	if len(m.Extra) > 0 {
		for k := range m.Extra {
			v := m.Extra[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintAction(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintAction(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintAction(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xba
		}
	}
	if len(m.Readme) > 0 {
		i -= len(m.Readme)
		copy(dAtA[i:], m.Readme)
		i = encodeVarintAction(dAtA, i, uint64(len(m.Readme)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if len(m.Tags) > 0 {
		for iNdEx := len(m.Tags) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Tags[iNdEx])
			copy(dAtA[i:], m.Tags[iNdEx])
			i = encodeVarintAction(dAtA, i, uint64(len(m.Tags[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xaa
		}
	}
	if m.IsPublic {
		i--
		if m.IsPublic {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if len(m.Code) > 0 {
		i -= len(m.Code)
		copy(dAtA[i:], m.Code)
		i = encodeVarintAction(dAtA, i, uint64(len(m.Code)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.Lang) > 0 {
		i -= len(m.Lang)
		copy(dAtA[i:], m.Lang)
		i = encodeVarintAction(dAtA, i, uint64(len(m.Lang)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.TestCases) > 0 {
		for iNdEx := len(m.TestCases) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TestCases[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAction(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x8a
		}
	}
	if len(m.Options) > 0 {
		for iNdEx := len(m.Options) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Options[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAction(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x82
		}
	}
	if len(m.SubActions) > 0 {
		for iNdEx := len(m.SubActions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SubActions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAction(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x7a
		}
	}
	if len(m.Outputs) > 0 {
		for iNdEx := len(m.Outputs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Outputs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAction(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x72
		}
	}
	if len(m.Inputs) > 0 {
		for iNdEx := len(m.Inputs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Inputs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAction(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x6a
		}
	}
	if len(m.Class) > 0 {
		i -= len(m.Class)
		copy(dAtA[i:], m.Class)
		i = encodeVarintAction(dAtA, i, uint64(len(m.Class)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.BatchFunc) > 0 {
		i -= len(m.BatchFunc)
		copy(dAtA[i:], m.BatchFunc)
		i = encodeVarintAction(dAtA, i, uint64(len(m.BatchFunc)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Func) > 0 {
		i -= len(m.Func)
		copy(dAtA[i:], m.Func)
		i = encodeVarintAction(dAtA, i, uint64(len(m.Func)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintAction(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintAction(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.CreatedBy) > 0 {
		i -= len(m.CreatedBy)
		copy(dAtA[i:], m.CreatedBy)
		i = encodeVarintAction(dAtA, i, uint64(len(m.CreatedBy)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Image) > 0 {
		i -= len(m.Image)
		copy(dAtA[i:], m.Image)
		i = encodeVarintAction(dAtA, i, uint64(len(m.Image)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ProjectId) > 0 {
		i -= len(m.ProjectId)
		copy(dAtA[i:], m.ProjectId)
		i = encodeVarintAction(dAtA, i, uint64(len(m.ProjectId)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Source != 0 {
		i = encodeVarintAction(dAtA, i, uint64(m.Source))
		i--
		dAtA[i] = 0x20
	}
	if m.Type != 0 {
		i = encodeVarintAction(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintAction(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.XId) > 0 {
		i -= len(m.XId)
		copy(dAtA[i:], m.XId)
		i = encodeVarintAction(dAtA, i, uint64(len(m.XId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAction(dAtA []byte, offset int, v uint64) int {
	offset -= sovAction(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ActionOptionItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovAction(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovAction(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovAction(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ActionOption) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAction(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovAction(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovAction(uint64(l))
	}
	l = len(m.Default)
	if l > 0 {
		n += 1 + l + sovAction(uint64(l))
	}
	if len(m.Options) > 0 {
		for _, e := range m.Options {
			l = e.Size()
			n += 1 + l + sovAction(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TestCase) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Inputs) > 0 {
		for k, v := range m.Inputs {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovAction(uint64(len(k))) + 1 + len(v) + sovAction(uint64(len(v)))
			n += mapEntrySize + 1 + sovAction(uint64(mapEntrySize))
		}
	}
	if len(m.Outputs) > 0 {
		for k, v := range m.Outputs {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovAction(uint64(len(k))) + 1 + len(v) + sovAction(uint64(len(v)))
			n += mapEntrySize + 1 + sovAction(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SubAction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAction(uint64(l))
	}
	if len(m.Inputs) > 0 {
		for k, v := range m.Inputs {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovAction(uint64(len(k))) + 1 + len(v) + sovAction(uint64(len(v)))
			n += mapEntrySize + 1 + sovAction(uint64(mapEntrySize))
		}
	}
	if len(m.Outputs) > 0 {
		for k, v := range m.Outputs {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovAction(uint64(len(k))) + 1 + len(v) + sovAction(uint64(len(v)))
			n += mapEntrySize + 1 + sovAction(uint64(mapEntrySize))
		}
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovAction(uint64(l))
	}
	l = len(m.TagSelector)
	if l > 0 {
		n += 1 + l + sovAction(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ActionSelector) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			l = len(s)
			n += 1 + l + sovAction(uint64(l))
		}
	}
	if len(m.Types) > 0 {
		l = 0
		for _, e := range m.Types {
			l += sovAction(uint64(e))
		}
		n += 1 + sovAction(uint64(l)) + l
	}
	if len(m.Langs) > 0 {
		for _, s := range m.Langs {
			l = len(s)
			n += 1 + l + sovAction(uint64(l))
		}
	}
	if len(m.ExcludeTags) > 0 {
		for _, s := range m.ExcludeTags {
			l = len(s)
			n += 1 + l + sovAction(uint64(l))
		}
	}
	if len(m.ExcludeTypes) > 0 {
		for _, s := range m.ExcludeTypes {
			l = len(s)
			n += 1 + l + sovAction(uint64(l))
		}
	}
	if len(m.ExcludeLangs) > 0 {
		for _, s := range m.ExcludeLangs {
			l = len(s)
			n += 1 + l + sovAction(uint64(l))
		}
	}
	if len(m.Names) > 0 {
		for _, s := range m.Names {
			l = len(s)
			n += 1 + l + sovAction(uint64(l))
		}
	}
	if len(m.ExcludeNames) > 0 {
		for _, s := range m.ExcludeNames {
			l = len(s)
			n += 1 + l + sovAction(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StatusViewConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAction(uint64(l))
	}
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovAction(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovAction(uint64(l))
	}
	l = len(m.Template)
	if l > 0 {
		n += 1 + l + sovAction(uint64(l))
	}
	l = len(m.UpdateFunc)
	if l > 0 {
		n += 1 + l + sovAction(uint64(l))
	}
	l = len(m.Width)
	if l > 0 {
		n += 1 + l + sovAction(uint64(l))
	}
	l = len(m.Height)
	if l > 0 {
		n += 1 + l + sovAction(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ActionDisplayConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NodeContentTemplate)
	if l > 0 {
		n += 1 + l + sovAction(uint64(l))
	}
	if len(m.StatusViewConfigs) > 0 {
		for _, e := range m.StatusViewConfigs {
			l = e.Size()
			n += 1 + l + sovAction(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ActionInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.XId)
	if l > 0 {
		n += 1 + l + sovAction(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAction(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovAction(uint64(m.Type))
	}
	if m.Source != 0 {
		n += 1 + sovAction(uint64(m.Source))
	}
	l = len(m.ProjectId)
	if l > 0 {
		n += 1 + l + sovAction(uint64(l))
	}
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovAction(uint64(l))
	}
	l = len(m.CreatedBy)
	if l > 0 {
		n += 1 + l + sovAction(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovAction(uint64(l))
	}
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovAction(uint64(l))
	}
	l = len(m.Func)
	if l > 0 {
		n += 1 + l + sovAction(uint64(l))
	}
	l = len(m.BatchFunc)
	if l > 0 {
		n += 1 + l + sovAction(uint64(l))
	}
	l = len(m.Class)
	if l > 0 {
		n += 1 + l + sovAction(uint64(l))
	}
	if len(m.Inputs) > 0 {
		for _, e := range m.Inputs {
			l = e.Size()
			n += 1 + l + sovAction(uint64(l))
		}
	}
	if len(m.Outputs) > 0 {
		for _, e := range m.Outputs {
			l = e.Size()
			n += 1 + l + sovAction(uint64(l))
		}
	}
	if len(m.SubActions) > 0 {
		for _, e := range m.SubActions {
			l = e.Size()
			n += 1 + l + sovAction(uint64(l))
		}
	}
	if len(m.Options) > 0 {
		for _, e := range m.Options {
			l = e.Size()
			n += 2 + l + sovAction(uint64(l))
		}
	}
	if len(m.TestCases) > 0 {
		for _, e := range m.TestCases {
			l = e.Size()
			n += 2 + l + sovAction(uint64(l))
		}
	}
	l = len(m.Lang)
	if l > 0 {
		n += 2 + l + sovAction(uint64(l))
	}
	l = len(m.Code)
	if l > 0 {
		n += 2 + l + sovAction(uint64(l))
	}
	if m.IsPublic {
		n += 3
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			l = len(s)
			n += 2 + l + sovAction(uint64(l))
		}
	}
	l = len(m.Readme)
	if l > 0 {
		n += 2 + l + sovAction(uint64(l))
	}
	if len(m.Extra) > 0 {
		for k, v := range m.Extra {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovAction(uint64(len(k))) + 1 + len(v) + sovAction(uint64(len(v)))
			n += mapEntrySize + 2 + sovAction(uint64(mapEntrySize))
		}
	}
	l = len(m.Icon)
	if l > 0 {
		n += 2 + l + sovAction(uint64(l))
	}
	if m.ActionSelector != nil {
		l = m.ActionSelector.Size()
		n += 2 + l + sovAction(uint64(l))
	}
	if m.DisplayConfig != nil {
		l = m.DisplayConfig.Size()
		n += 2 + l + sovAction(uint64(l))
	}
	if len(m.EngineExtraOptions) > 0 {
		for _, e := range m.EngineExtraOptions {
			l = e.Size()
			n += 2 + l + sovAction(uint64(l))
		}
	}
	if m.CreatedTime != 0 {
		n += 2 + sovAction(uint64(m.CreatedTime))
	}
	if m.UpdatedTime != 0 {
		n += 2 + sovAction(uint64(m.UpdatedTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovAction(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAction(x uint64) (n int) {
	return sovAction(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ActionOptionItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActionOptionItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActionOptionItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActionOption) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActionOption: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActionOption: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Default", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Default = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Options = append(m.Options, &ActionOptionItem{})
			if err := m.Options[len(m.Options)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestCase) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestCase: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestCase: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inputs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Inputs == nil {
				m.Inputs = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAction
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAction
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthAction
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthAction
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAction
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthAction
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthAction
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipAction(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthAction
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Inputs[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Outputs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Outputs == nil {
				m.Outputs = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAction
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAction
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthAction
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthAction
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAction
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthAction
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthAction
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipAction(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthAction
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Outputs[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubAction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubAction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubAction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inputs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Inputs == nil {
				m.Inputs = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAction
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAction
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthAction
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthAction
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAction
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthAction
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthAction
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipAction(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthAction
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Inputs[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Outputs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Outputs == nil {
				m.Outputs = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAction
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAction
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthAction
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthAction
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAction
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthAction
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthAction
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipAction(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthAction
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Outputs[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TagSelector", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TagSelector = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActionSelector) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActionSelector: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActionSelector: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v ActionType
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAction
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= ActionType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Types = append(m.Types, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAction
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAction
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthAction
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Types) == 0 {
					m.Types = make([]ActionType, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v ActionType
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAction
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= ActionType(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Types = append(m.Types, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Types", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Langs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Langs = append(m.Langs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExcludeTags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExcludeTags = append(m.ExcludeTags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExcludeTypes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExcludeTypes = append(m.ExcludeTypes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExcludeLangs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExcludeLangs = append(m.ExcludeLangs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Names", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Names = append(m.Names, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExcludeNames", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExcludeNames = append(m.ExcludeNames, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatusViewConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatusViewConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatusViewConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Template", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Template = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateFunc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdateFunc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Width", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Width = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Height = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActionDisplayConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActionDisplayConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActionDisplayConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeContentTemplate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeContentTemplate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusViewConfigs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatusViewConfigs = append(m.StatusViewConfigs, &StatusViewConfig{})
			if err := m.StatusViewConfigs[len(m.StatusViewConfigs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActionInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActionInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActionInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field XId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= ActionType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			m.Source = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Source |= ActionSource(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Func", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Func = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchFunc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BatchFunc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Class", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Class = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inputs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Inputs = append(m.Inputs, &Parameter{})
			if err := m.Inputs[len(m.Inputs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Outputs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Outputs = append(m.Outputs, &Parameter{})
			if err := m.Outputs[len(m.Outputs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubActions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubActions = append(m.SubActions, &SubAction{})
			if err := m.SubActions[len(m.SubActions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Options = append(m.Options, &ActionOption{})
			if err := m.Options[len(m.Options)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestCases", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TestCases = append(m.TestCases, &TestCase{})
			if err := m.TestCases[len(m.TestCases)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lang", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Lang = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPublic", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsPublic = bool(v != 0)
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Readme", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Readme = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Extra == nil {
				m.Extra = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAction
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAction
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthAction
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthAction
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAction
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthAction
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthAction
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipAction(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthAction
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Extra[mapkey] = mapvalue
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Icon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ActionSelector == nil {
				m.ActionSelector = &ActionSelector{}
			}
			if err := m.ActionSelector.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DisplayConfig == nil {
				m.DisplayConfig = &ActionDisplayConfig{}
			}
			if err := m.DisplayConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EngineExtraOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EngineExtraOptions = append(m.EngineExtraOptions, &ActionOption{})
			if err := m.EngineExtraOptions[len(m.EngineExtraOptions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedTime", wireType)
			}
			m.CreatedTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedTime", wireType)
			}
			m.UpdatedTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAction(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAction
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAction
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAction
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAction
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAction
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAction
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAction        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAction          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAction = fmt.Errorf("proto: unexpected end of group")
)
