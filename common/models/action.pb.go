// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tiops/common/models/action.proto

package models

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ActionType int32

const (
	ActionType_Service     ActionType = 0
	ActionType_Local       ActionType = 1
	ActionType_Application ActionType = 2
)

var ActionType_name = map[int32]string{
	0: "Service",
	1: "Local",
	2: "Application",
}

var ActionType_value = map[string]int32{
	"Service":     0,
	"Local":       1,
	"Application": 2,
}

func (x ActionType) String() string {
	return proto.EnumName(ActionType_name, int32(x))
}

func (ActionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3e156f56ecac6ad0, []int{0}
}

type ActionInfo struct {
	XId                  string       `protobuf:"bytes,1,opt,name=_id,json=Id,proto3" json:"_id,omitempty" bson:"_id"`
	ProjectId            string       `protobuf:"bytes,2,opt,name=projectId,proto3" json:"projectId,omitempty" bson:"projectId"`
	Type                 ActionType   `protobuf:"varint,3,opt,name=type,proto3,enum=models.ActionType" json:"type,omitempty" bson:"type"`
	Name                 string       `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty" bson:"name"`
	Description          string       `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty" bson:"description"`
	Path                 string       `protobuf:"bytes,6,opt,name=path,proto3" json:"path,omitempty" bson:"path"`
	Func                 string       `protobuf:"bytes,7,opt,name=func,proto3" json:"func,omitempty" bson:"func"`
	BatchFunc            string       `protobuf:"bytes,8,opt,name=batchFunc,proto3" json:"batchFunc,omitempty" bson:"batchFunc"`
	Class                string       `protobuf:"bytes,9,opt,name=class,proto3" json:"class,omitempty" bson:"class"`
	Inputs               []*Parameter `protobuf:"bytes,10,rep,name=inputs,proto3" json:"inputs,omitempty" bson:"inputs"`
	Outputs              []*Parameter `protobuf:"bytes,11,rep,name=outputs,proto3" json:"outputs,omitempty" bson:"outputs"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-" bson:"-"`
	XXX_unrecognized     []byte       `json:"-" bson:"-"`
	XXX_sizecache        int32        `json:"-" bson:"-"`
}

func (m *ActionInfo) Reset()         { *m = ActionInfo{} }
func (m *ActionInfo) String() string { return proto.CompactTextString(m) }
func (*ActionInfo) ProtoMessage()    {}
func (*ActionInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e156f56ecac6ad0, []int{0}
}
func (m *ActionInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActionInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActionInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActionInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActionInfo.Merge(m, src)
}
func (m *ActionInfo) XXX_Size() int {
	return m.Size()
}
func (m *ActionInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ActionInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ActionInfo proto.InternalMessageInfo

func (m *ActionInfo) GetXId() string {
	if m != nil {
		return m.XId
	}
	return ""
}

func (m *ActionInfo) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *ActionInfo) GetType() ActionType {
	if m != nil {
		return m.Type
	}
	return ActionType_Service
}

func (m *ActionInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ActionInfo) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ActionInfo) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *ActionInfo) GetFunc() string {
	if m != nil {
		return m.Func
	}
	return ""
}

func (m *ActionInfo) GetBatchFunc() string {
	if m != nil {
		return m.BatchFunc
	}
	return ""
}

func (m *ActionInfo) GetClass() string {
	if m != nil {
		return m.Class
	}
	return ""
}

func (m *ActionInfo) GetInputs() []*Parameter {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *ActionInfo) GetOutputs() []*Parameter {
	if m != nil {
		return m.Outputs
	}
	return nil
}

func init() {
	proto.RegisterEnum("models.ActionType", ActionType_name, ActionType_value)
	proto.RegisterType((*ActionInfo)(nil), "models.ActionInfo")
}

func init() { proto.RegisterFile("tiops/common/models/action.proto", fileDescriptor_3e156f56ecac6ad0) }

var fileDescriptor_3e156f56ecac6ad0 = []byte{
	// 360 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xc1, 0x4a, 0xfb, 0x40,
	0x10, 0xc6, 0x9b, 0xa4, 0x4d, 0xff, 0x99, 0xc0, 0xbf, 0x71, 0xf1, 0xb0, 0x88, 0x84, 0xd0, 0x83,
	0x54, 0x85, 0x16, 0x2a, 0x5e, 0xbc, 0xb5, 0x07, 0xa1, 0xe0, 0x41, 0xa2, 0xf7, 0xb2, 0xdd, 0x6c,
	0xdb, 0x95, 0x24, 0xbb, 0x24, 0x5b, 0xa1, 0x77, 0x1f, 0x42, 0x3c, 0xf8, 0x3c, 0x1e, 0x7d, 0x02,
	0x91, 0xfa, 0x22, 0xb2, 0xbb, 0x56, 0x3d, 0xd4, 0xdb, 0xcc, 0xf7, 0xfd, 0x66, 0xe6, 0x4b, 0x16,
	0x12, 0xc5, 0x85, 0xac, 0x07, 0x54, 0x14, 0x85, 0x28, 0x07, 0x85, 0xc8, 0x58, 0x5e, 0x0f, 0x08,
	0x55, 0x5c, 0x94, 0x7d, 0x59, 0x09, 0x25, 0x90, 0x6f, 0xc5, 0x83, 0x9d, 0xa4, 0xed, 0x2c, 0xb9,
	0x9b, 0x50, 0x64, 0xb1, 0x60, 0x95, 0x25, 0xba, 0x6f, 0x2e, 0xc0, 0xc8, 0x2c, 0x9f, 0x94, 0x73,
	0x81, 0x12, 0xf0, 0xa6, 0x3c, 0xc3, 0x4e, 0xe2, 0xf4, 0x82, 0x71, 0xe7, 0xe9, 0xe1, 0xd9, 0x83,
	0x59, 0x2d, 0xca, 0x8b, 0xee, 0x94, 0x67, 0xdd, 0xd4, 0x9d, 0x64, 0xe8, 0x10, 0x02, 0x59, 0x89,
	0x3b, 0x46, 0xd5, 0x24, 0xc3, 0xae, 0xe6, 0xd2, 0x1f, 0x01, 0x1d, 0x41, 0x53, 0xad, 0x25, 0xc3,
	0x5e, 0xe2, 0xf4, 0xfe, 0x0f, 0x51, 0xdf, 0x9e, 0xec, 0xdb, 0x0b, 0xb7, 0x6b, 0xc9, 0x52, 0xe3,
	0x23, 0x04, 0xcd, 0x92, 0x14, 0x0c, 0x37, 0xcd, 0x02, 0x53, 0xa3, 0x04, 0xc2, 0x8c, 0xd5, 0xb4,
	0xe2, 0x52, 0xc3, 0xb8, 0x65, 0xac, 0xdf, 0x92, 0x9e, 0x92, 0x44, 0x2d, 0xb1, 0x6f, 0xa7, 0x74,
	0xad, 0xb5, 0xf9, 0xaa, 0xa4, 0xb8, 0x6d, 0x35, 0x5d, 0xeb, 0x8c, 0x33, 0xa2, 0xe8, 0xf2, 0x52,
	0x1b, 0xff, 0x6c, 0xc6, 0x6f, 0x01, 0xed, 0x43, 0x8b, 0xe6, 0xa4, 0xae, 0x71, 0x60, 0x1c, 0xdb,
	0xa0, 0x63, 0xf0, 0x79, 0x29, 0x57, 0xaa, 0xc6, 0x90, 0x78, 0xbd, 0x70, 0xb8, 0xb7, 0xcd, 0x7e,
	0x4d, 0x2a, 0x52, 0x30, 0xc5, 0xaa, 0xf4, 0x0b, 0x40, 0xa7, 0xd0, 0x16, 0x2b, 0x65, 0xd8, 0xf0,
	0x2f, 0x76, 0x4b, 0x9c, 0x9c, 0x6f, 0xff, 0xaf, 0xfe, 0x7a, 0x14, 0x42, 0xfb, 0x86, 0x55, 0xf7,
	0x9c, 0xb2, 0xa8, 0x81, 0x02, 0x68, 0x5d, 0x09, 0x4a, 0xf2, 0xc8, 0x41, 0x1d, 0x08, 0x47, 0x52,
	0xe6, 0x9c, 0x12, 0x8d, 0x46, 0xee, 0x38, 0x7a, 0xd9, 0xc4, 0xce, 0xeb, 0x26, 0x76, 0xde, 0x37,
	0xb1, 0xf3, 0xf8, 0x11, 0x37, 0x66, 0xbe, 0x79, 0xb0, 0xb3, 0xcf, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xf1, 0xe1, 0xf1, 0x59, 0x20, 0x02, 0x00, 0x00,
}

func (m *ActionInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActionInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActionInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Outputs) > 0 {
		for iNdEx := len(m.Outputs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Outputs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAction(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if len(m.Inputs) > 0 {
		for iNdEx := len(m.Inputs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Inputs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAction(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.Class) > 0 {
		i -= len(m.Class)
		copy(dAtA[i:], m.Class)
		i = encodeVarintAction(dAtA, i, uint64(len(m.Class)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.BatchFunc) > 0 {
		i -= len(m.BatchFunc)
		copy(dAtA[i:], m.BatchFunc)
		i = encodeVarintAction(dAtA, i, uint64(len(m.BatchFunc)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Func) > 0 {
		i -= len(m.Func)
		copy(dAtA[i:], m.Func)
		i = encodeVarintAction(dAtA, i, uint64(len(m.Func)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintAction(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintAction(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintAction(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x22
	}
	if m.Type != 0 {
		i = encodeVarintAction(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ProjectId) > 0 {
		i -= len(m.ProjectId)
		copy(dAtA[i:], m.ProjectId)
		i = encodeVarintAction(dAtA, i, uint64(len(m.ProjectId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.XId) > 0 {
		i -= len(m.XId)
		copy(dAtA[i:], m.XId)
		i = encodeVarintAction(dAtA, i, uint64(len(m.XId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAction(dAtA []byte, offset int, v uint64) int {
	offset -= sovAction(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ActionInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.XId)
	if l > 0 {
		n += 1 + l + sovAction(uint64(l))
	}
	l = len(m.ProjectId)
	if l > 0 {
		n += 1 + l + sovAction(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovAction(uint64(m.Type))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAction(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovAction(uint64(l))
	}
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovAction(uint64(l))
	}
	l = len(m.Func)
	if l > 0 {
		n += 1 + l + sovAction(uint64(l))
	}
	l = len(m.BatchFunc)
	if l > 0 {
		n += 1 + l + sovAction(uint64(l))
	}
	l = len(m.Class)
	if l > 0 {
		n += 1 + l + sovAction(uint64(l))
	}
	if len(m.Inputs) > 0 {
		for _, e := range m.Inputs {
			l = e.Size()
			n += 1 + l + sovAction(uint64(l))
		}
	}
	if len(m.Outputs) > 0 {
		for _, e := range m.Outputs {
			l = e.Size()
			n += 1 + l + sovAction(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovAction(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAction(x uint64) (n int) {
	return sovAction(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ActionInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActionInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActionInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field XId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= ActionType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Func", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Func = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchFunc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BatchFunc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Class", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Class = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inputs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Inputs = append(m.Inputs, &Parameter{})
			if err := m.Inputs[len(m.Inputs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Outputs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Outputs = append(m.Outputs, &Parameter{})
			if err := m.Outputs[len(m.Outputs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAction(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAction
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAction
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAction
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAction
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAction
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAction
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAction        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAction          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAction = fmt.Errorf("proto: unexpected end of group")
)
