// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tiops/common/models/notebook.proto

package models

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type NotebookInfo struct {
	Name                 string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" bson:"name"`
	CreatedBy            string            `protobuf:"bytes,2,opt,name=createdBy,proto3" json:"createdBy,omitempty" bson:"createdBy"`
	Image                string            `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty" bson:"image"`
	RepoType             int32             `protobuf:"varint,4,opt,name=repoType,proto3" json:"repoType,omitempty" bson:"repoType"`
	RepoName             string            `protobuf:"bytes,5,opt,name=repoName,proto3" json:"repoName,omitempty" bson:"repoName"`
	Token                string            `protobuf:"bytes,6,opt,name=token,proto3" json:"token,omitempty" bson:"token"`
	Url                  string            `protobuf:"bytes,7,opt,name=url,proto3" json:"url,omitempty" bson:"url"`
	UsePathRewrite       bool              `protobuf:"varint,8,opt,name=usePathRewrite,proto3" json:"usePathRewrite,omitempty" bson:"usePathRewrite"`
	Description          string            `protobuf:"bytes,9,opt,name=description,proto3" json:"description,omitempty" bson:"description"`
	DatasetVolumes       []*DatasetVolume  `protobuf:"bytes,10,rep,name=datasetVolumes,proto3" json:"datasetVolumes,omitempty" bson:"datasetVolumes"`
	WorkDir              string            `protobuf:"bytes,11,opt,name=workDir,proto3" json:"workDir,omitempty" bson:"workDir"`
	Env                  map[string]string `protobuf:"bytes,12,rep,name=env,proto3" json:"env,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" bson:"env"`
	Cpu                  string            `protobuf:"bytes,13,opt,name=cpu,proto3" json:"cpu,omitempty" bson:"cpu"`
	Memory               string            `protobuf:"bytes,14,opt,name=memory,proto3" json:"memory,omitempty" bson:"memory"`
	Gpu                  string            `protobuf:"bytes,15,opt,name=gpu,proto3" json:"gpu,omitempty" bson:"gpu"`
	Ports                []string          `protobuf:"bytes,16,rep,name=ports,proto3" json:"ports,omitempty" bson:"ports"`
	Ready                bool              `protobuf:"varint,17,opt,name=ready,proto3" json:"ready,omitempty" bson:"ready"`
	Conditions           []string          `protobuf:"bytes,18,rep,name=conditions,proto3" json:"conditions,omitempty" bson:"conditions"`
	CreatedTime          int64             `protobuf:"varint,19,opt,name=createdTime,proto3" json:"createdTime,omitempty" bson:"createdTime"`
	ReadyTime            int64             `protobuf:"varint,20,opt,name=readyTime,proto3" json:"readyTime,omitempty" bson:"readyTime"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-" bson:"-"`
	XXX_unrecognized     []byte            `json:"-" bson:"-"`
	XXX_sizecache        int32             `json:"-" bson:"-"`
}

func (m *NotebookInfo) Reset()         { *m = NotebookInfo{} }
func (m *NotebookInfo) String() string { return proto.CompactTextString(m) }
func (*NotebookInfo) ProtoMessage()    {}
func (*NotebookInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_0767a0abedb64043, []int{0}
}
func (m *NotebookInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotebookInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotebookInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotebookInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotebookInfo.Merge(m, src)
}
func (m *NotebookInfo) XXX_Size() int {
	return m.Size()
}
func (m *NotebookInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_NotebookInfo.DiscardUnknown(m)
}

var xxx_messageInfo_NotebookInfo proto.InternalMessageInfo

func (m *NotebookInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NotebookInfo) GetCreatedBy() string {
	if m != nil {
		return m.CreatedBy
	}
	return ""
}

func (m *NotebookInfo) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *NotebookInfo) GetRepoType() int32 {
	if m != nil {
		return m.RepoType
	}
	return 0
}

func (m *NotebookInfo) GetRepoName() string {
	if m != nil {
		return m.RepoName
	}
	return ""
}

func (m *NotebookInfo) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *NotebookInfo) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *NotebookInfo) GetUsePathRewrite() bool {
	if m != nil {
		return m.UsePathRewrite
	}
	return false
}

func (m *NotebookInfo) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *NotebookInfo) GetDatasetVolumes() []*DatasetVolume {
	if m != nil {
		return m.DatasetVolumes
	}
	return nil
}

func (m *NotebookInfo) GetWorkDir() string {
	if m != nil {
		return m.WorkDir
	}
	return ""
}

func (m *NotebookInfo) GetEnv() map[string]string {
	if m != nil {
		return m.Env
	}
	return nil
}

func (m *NotebookInfo) GetCpu() string {
	if m != nil {
		return m.Cpu
	}
	return ""
}

func (m *NotebookInfo) GetMemory() string {
	if m != nil {
		return m.Memory
	}
	return ""
}

func (m *NotebookInfo) GetGpu() string {
	if m != nil {
		return m.Gpu
	}
	return ""
}

func (m *NotebookInfo) GetPorts() []string {
	if m != nil {
		return m.Ports
	}
	return nil
}

func (m *NotebookInfo) GetReady() bool {
	if m != nil {
		return m.Ready
	}
	return false
}

func (m *NotebookInfo) GetConditions() []string {
	if m != nil {
		return m.Conditions
	}
	return nil
}

func (m *NotebookInfo) GetCreatedTime() int64 {
	if m != nil {
		return m.CreatedTime
	}
	return 0
}

func (m *NotebookInfo) GetReadyTime() int64 {
	if m != nil {
		return m.ReadyTime
	}
	return 0
}

func init() {
	proto.RegisterType((*NotebookInfo)(nil), "models.NotebookInfo")
	proto.RegisterMapType((map[string]string)(nil), "models.NotebookInfo.EnvEntry")
}

func init() { proto.RegisterFile("tiops/common/models/notebook.proto", fileDescriptor_0767a0abedb64043) }

var fileDescriptor_0767a0abedb64043 = []byte{
	// 450 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x52, 0xdd, 0x6e, 0xd3, 0x30,
	0x14, 0xc6, 0xcb, 0xda, 0xb5, 0xee, 0x28, 0xc5, 0x0c, 0x74, 0x54, 0x41, 0x14, 0xed, 0x02, 0xe5,
	0xaa, 0x95, 0x40, 0x42, 0x08, 0x89, 0x9b, 0x69, 0xbb, 0xe0, 0x66, 0x42, 0xd1, 0xc4, 0x7d, 0x96,
	0x1c, 0x4a, 0xd4, 0xda, 0xc7, 0x72, 0x9c, 0x4e, 0x79, 0x05, 0x9e, 0x80, 0x47, 0xe2, 0x92, 0x47,
	0x40, 0xe5, 0x45, 0x90, 0xed, 0x74, 0x8b, 0xaa, 0xdd, 0xf9, 0xfb, 0xf1, 0x17, 0x9f, 0x2f, 0x87,
	0x9f, 0xdb, 0x8a, 0x74, 0xbd, 0x2c, 0x48, 0x4a, 0x52, 0x4b, 0x49, 0x25, 0x6e, 0xea, 0xa5, 0x22,
	0x8b, 0xb7, 0x44, 0xeb, 0x85, 0x36, 0x64, 0x49, 0x0c, 0x03, 0x3d, 0x4f, 0x1e, 0xf3, 0x06, 0x14,
	0x9c, 0xe7, 0x3f, 0x07, 0xfc, 0xf4, 0xba, 0xbb, 0xfc, 0x45, 0x7d, 0x27, 0x21, 0xf8, 0xb1, 0xca,
	0x25, 0x02, 0x4b, 0x58, 0x3a, 0xce, 0xfc, 0x59, 0xbc, 0xe6, 0xe3, 0xc2, 0x60, 0x6e, 0xb1, 0xbc,
	0x68, 0xe1, 0xc8, 0x0b, 0x0f, 0x84, 0x38, 0xe3, 0x83, 0x4a, 0xe6, 0x2b, 0x84, 0xc8, 0x2b, 0x01,
	0x88, 0x39, 0x1f, 0x19, 0xd4, 0x74, 0xd3, 0x6a, 0x84, 0xe3, 0x84, 0xa5, 0x83, 0xec, 0x1e, 0xef,
	0xb5, 0x6b, 0xf7, 0x9d, 0x81, 0xbf, 0x74, 0x8f, 0x5d, 0x9a, 0xa5, 0x35, 0x2a, 0x18, 0x86, 0x34,
	0x0f, 0xc4, 0x8c, 0x47, 0x8d, 0xd9, 0xc0, 0x89, 0xe7, 0xdc, 0x51, 0xbc, 0xe5, 0xd3, 0xa6, 0xc6,
	0xaf, 0xb9, 0xfd, 0x91, 0xe1, 0x9d, 0xa9, 0x2c, 0xc2, 0x28, 0x61, 0xe9, 0x28, 0x3b, 0x60, 0x45,
	0xc2, 0x27, 0x25, 0xd6, 0x85, 0xa9, 0xb4, 0xad, 0x48, 0xc1, 0xd8, 0x27, 0xf4, 0x29, 0xf1, 0x99,
	0x4f, 0xcb, 0xdc, 0xe6, 0x35, 0xda, 0x6f, 0xb4, 0x69, 0x24, 0xd6, 0xc0, 0x93, 0x28, 0x9d, 0xbc,
	0x7b, 0xb9, 0x08, 0x85, 0x2d, 0x2e, 0xfb, 0x6a, 0x76, 0x60, 0x16, 0xc0, 0x4f, 0xee, 0xc8, 0xac,
	0x2f, 0x2b, 0x03, 0x13, 0x1f, 0xbe, 0x87, 0x62, 0xc9, 0x23, 0x54, 0x5b, 0x38, 0xf5, 0x69, 0x6f,
	0xf6, 0x69, 0xfd, 0xb6, 0x17, 0x57, 0x6a, 0x7b, 0xa5, 0xac, 0x69, 0x33, 0xe7, 0x74, 0x53, 0x16,
	0xba, 0x81, 0xa7, 0x61, 0xca, 0x42, 0x37, 0xe2, 0x15, 0x1f, 0x4a, 0x94, 0x64, 0x5a, 0x98, 0x7a,
	0xb2, 0x43, 0xce, 0xb9, 0xd2, 0x0d, 0x3c, 0x0b, 0xce, 0x95, 0x6e, 0x5c, 0x6f, 0x9a, 0x8c, 0xad,
	0x61, 0x96, 0x44, 0xae, 0x37, 0x0f, 0x1c, 0x6b, 0x30, 0x2f, 0x5b, 0x78, 0xee, 0xcb, 0x09, 0x40,
	0xc4, 0x9c, 0x17, 0xa4, 0xca, 0xca, 0x8d, 0x5f, 0x83, 0xf0, 0x17, 0x7a, 0x8c, 0xeb, 0xac, 0xfb,
	0xbd, 0x37, 0x95, 0x44, 0x78, 0x91, 0xb0, 0x34, 0xca, 0xfa, 0x94, 0xdb, 0x08, 0x1f, 0xe5, 0xf5,
	0x33, 0xaf, 0x3f, 0x10, 0xf3, 0x0f, 0x7c, 0xb4, 0x1f, 0xcc, 0xbd, 0x74, 0x8d, 0x6d, 0xb7, 0x4e,
	0xee, 0xe8, 0xde, 0xb4, 0xcd, 0x37, 0x0d, 0x76, 0x9b, 0x14, 0xc0, 0xa7, 0xa3, 0x8f, 0xec, 0x62,
	0xf6, 0x7b, 0x17, 0xb3, 0x3f, 0xbb, 0x98, 0xfd, 0xdd, 0xc5, 0xec, 0xd7, 0xbf, 0xf8, 0xc9, 0xed,
	0xd0, 0x6f, 0xe9, 0xfb, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0x06, 0x15, 0x4f, 0xab, 0xf5, 0x02,
	0x00, 0x00,
}

func (m *NotebookInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotebookInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotebookInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ReadyTime != 0 {
		i = encodeVarintNotebook(dAtA, i, uint64(m.ReadyTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.CreatedTime != 0 {
		i = encodeVarintNotebook(dAtA, i, uint64(m.CreatedTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if len(m.Conditions) > 0 {
		for iNdEx := len(m.Conditions) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Conditions[iNdEx])
			copy(dAtA[i:], m.Conditions[iNdEx])
			i = encodeVarintNotebook(dAtA, i, uint64(len(m.Conditions[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x92
		}
	}
	if m.Ready {
		i--
		if m.Ready {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if len(m.Ports) > 0 {
		for iNdEx := len(m.Ports) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Ports[iNdEx])
			copy(dAtA[i:], m.Ports[iNdEx])
			i = encodeVarintNotebook(dAtA, i, uint64(len(m.Ports[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x82
		}
	}
	if len(m.Gpu) > 0 {
		i -= len(m.Gpu)
		copy(dAtA[i:], m.Gpu)
		i = encodeVarintNotebook(dAtA, i, uint64(len(m.Gpu)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.Memory) > 0 {
		i -= len(m.Memory)
		copy(dAtA[i:], m.Memory)
		i = encodeVarintNotebook(dAtA, i, uint64(len(m.Memory)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.Cpu) > 0 {
		i -= len(m.Cpu)
		copy(dAtA[i:], m.Cpu)
		i = encodeVarintNotebook(dAtA, i, uint64(len(m.Cpu)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.Env) > 0 {
		for k := range m.Env {
			v := m.Env[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintNotebook(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintNotebook(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintNotebook(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x62
		}
	}
	if len(m.WorkDir) > 0 {
		i -= len(m.WorkDir)
		copy(dAtA[i:], m.WorkDir)
		i = encodeVarintNotebook(dAtA, i, uint64(len(m.WorkDir)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.DatasetVolumes) > 0 {
		for iNdEx := len(m.DatasetVolumes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DatasetVolumes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNotebook(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintNotebook(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x4a
	}
	if m.UsePathRewrite {
		i--
		if m.UsePathRewrite {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintNotebook(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintNotebook(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.RepoName) > 0 {
		i -= len(m.RepoName)
		copy(dAtA[i:], m.RepoName)
		i = encodeVarintNotebook(dAtA, i, uint64(len(m.RepoName)))
		i--
		dAtA[i] = 0x2a
	}
	if m.RepoType != 0 {
		i = encodeVarintNotebook(dAtA, i, uint64(m.RepoType))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Image) > 0 {
		i -= len(m.Image)
		copy(dAtA[i:], m.Image)
		i = encodeVarintNotebook(dAtA, i, uint64(len(m.Image)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CreatedBy) > 0 {
		i -= len(m.CreatedBy)
		copy(dAtA[i:], m.CreatedBy)
		i = encodeVarintNotebook(dAtA, i, uint64(len(m.CreatedBy)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintNotebook(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintNotebook(dAtA []byte, offset int, v uint64) int {
	offset -= sovNotebook(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *NotebookInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovNotebook(uint64(l))
	}
	l = len(m.CreatedBy)
	if l > 0 {
		n += 1 + l + sovNotebook(uint64(l))
	}
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovNotebook(uint64(l))
	}
	if m.RepoType != 0 {
		n += 1 + sovNotebook(uint64(m.RepoType))
	}
	l = len(m.RepoName)
	if l > 0 {
		n += 1 + l + sovNotebook(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovNotebook(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovNotebook(uint64(l))
	}
	if m.UsePathRewrite {
		n += 2
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovNotebook(uint64(l))
	}
	if len(m.DatasetVolumes) > 0 {
		for _, e := range m.DatasetVolumes {
			l = e.Size()
			n += 1 + l + sovNotebook(uint64(l))
		}
	}
	l = len(m.WorkDir)
	if l > 0 {
		n += 1 + l + sovNotebook(uint64(l))
	}
	if len(m.Env) > 0 {
		for k, v := range m.Env {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovNotebook(uint64(len(k))) + 1 + len(v) + sovNotebook(uint64(len(v)))
			n += mapEntrySize + 1 + sovNotebook(uint64(mapEntrySize))
		}
	}
	l = len(m.Cpu)
	if l > 0 {
		n += 1 + l + sovNotebook(uint64(l))
	}
	l = len(m.Memory)
	if l > 0 {
		n += 1 + l + sovNotebook(uint64(l))
	}
	l = len(m.Gpu)
	if l > 0 {
		n += 1 + l + sovNotebook(uint64(l))
	}
	if len(m.Ports) > 0 {
		for _, s := range m.Ports {
			l = len(s)
			n += 2 + l + sovNotebook(uint64(l))
		}
	}
	if m.Ready {
		n += 3
	}
	if len(m.Conditions) > 0 {
		for _, s := range m.Conditions {
			l = len(s)
			n += 2 + l + sovNotebook(uint64(l))
		}
	}
	if m.CreatedTime != 0 {
		n += 2 + sovNotebook(uint64(m.CreatedTime))
	}
	if m.ReadyTime != 0 {
		n += 2 + sovNotebook(uint64(m.ReadyTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovNotebook(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNotebook(x uint64) (n int) {
	return sovNotebook(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NotebookInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNotebook
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotebookInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotebookInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotebook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNotebook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNotebook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotebook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNotebook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNotebook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotebook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNotebook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNotebook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepoType", wireType)
			}
			m.RepoType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotebook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RepoType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepoName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotebook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNotebook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNotebook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RepoName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotebook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNotebook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNotebook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotebook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNotebook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNotebook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsePathRewrite", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotebook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UsePathRewrite = bool(v != 0)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotebook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNotebook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNotebook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DatasetVolumes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotebook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNotebook
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNotebook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DatasetVolumes = append(m.DatasetVolumes, &DatasetVolume{})
			if err := m.DatasetVolumes[len(m.DatasetVolumes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkDir", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotebook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNotebook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNotebook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkDir = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Env", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotebook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNotebook
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNotebook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Env == nil {
				m.Env = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNotebook
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNotebook
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthNotebook
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthNotebook
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNotebook
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthNotebook
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthNotebook
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipNotebook(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthNotebook
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Env[mapkey] = mapvalue
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cpu", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotebook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNotebook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNotebook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cpu = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memory", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotebook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNotebook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNotebook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Memory = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gpu", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotebook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNotebook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNotebook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gpu = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ports", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotebook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNotebook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNotebook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ports = append(m.Ports, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ready", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotebook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ready = bool(v != 0)
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conditions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotebook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNotebook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNotebook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Conditions = append(m.Conditions, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedTime", wireType)
			}
			m.CreatedTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotebook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadyTime", wireType)
			}
			m.ReadyTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotebook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReadyTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNotebook(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNotebook
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNotebook(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNotebook
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNotebook
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNotebook
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNotebook
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNotebook
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNotebook
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNotebook        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNotebook          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNotebook = fmt.Errorf("proto: unexpected end of group")
)
