// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tiops/common/models/action-service.proto

package models

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ActionService struct {
	Name                 string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" bson:"name"`
	CreatedBy            string            `protobuf:"bytes,2,opt,name=createdBy,proto3" json:"createdBy,omitempty" bson:"createdBy"`
	Description          string            `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty" bson:"description"`
	Image                string            `protobuf:"bytes,4,opt,name=image,proto3" json:"image,omitempty" bson:"image"`
	Env                  map[string]string `protobuf:"bytes,5,rep,name=env,proto3" json:"env,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" bson:"env"`
	RuntimeConfig        *RuntimeConfig    `protobuf:"bytes,6,opt,name=runtimeConfig,proto3" json:"runtimeConfig,omitempty" bson:"runtimeConfig"`
	Ready                bool              `protobuf:"varint,7,opt,name=ready,proto3" json:"ready,omitempty" bson:"ready"`
	Conditions           []string          `protobuf:"bytes,8,rep,name=conditions,proto3" json:"conditions,omitempty" bson:"conditions"`
	LogId                string            `protobuf:"bytes,9,opt,name=logId,proto3" json:"logId,omitempty" bson:"logId"`
	Tags                 []string          `protobuf:"bytes,10,rep,name=tags,proto3" json:"tags,omitempty" bson:"tags"`
	CreatedTime          int64             `protobuf:"varint,11,opt,name=createdTime,proto3" json:"createdTime,omitempty" bson:"createdTime"`
	ReadyTime            int64             `protobuf:"varint,12,opt,name=readyTime,proto3" json:"readyTime,omitempty" bson:"readyTime"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-" bson:"-"`
	XXX_unrecognized     []byte            `json:"-" bson:"-"`
	XXX_sizecache        int32             `json:"-" bson:"-"`
}

func (m *ActionService) Reset()         { *m = ActionService{} }
func (m *ActionService) String() string { return proto.CompactTextString(m) }
func (*ActionService) ProtoMessage()    {}
func (*ActionService) Descriptor() ([]byte, []int) {
	return fileDescriptor_76286fa0359ee765, []int{0}
}
func (m *ActionService) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActionService) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActionService.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActionService) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActionService.Merge(m, src)
}
func (m *ActionService) XXX_Size() int {
	return m.Size()
}
func (m *ActionService) XXX_DiscardUnknown() {
	xxx_messageInfo_ActionService.DiscardUnknown(m)
}

var xxx_messageInfo_ActionService proto.InternalMessageInfo

func (m *ActionService) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ActionService) GetCreatedBy() string {
	if m != nil {
		return m.CreatedBy
	}
	return ""
}

func (m *ActionService) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ActionService) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *ActionService) GetEnv() map[string]string {
	if m != nil {
		return m.Env
	}
	return nil
}

func (m *ActionService) GetRuntimeConfig() *RuntimeConfig {
	if m != nil {
		return m.RuntimeConfig
	}
	return nil
}

func (m *ActionService) GetReady() bool {
	if m != nil {
		return m.Ready
	}
	return false
}

func (m *ActionService) GetConditions() []string {
	if m != nil {
		return m.Conditions
	}
	return nil
}

func (m *ActionService) GetLogId() string {
	if m != nil {
		return m.LogId
	}
	return ""
}

func (m *ActionService) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *ActionService) GetCreatedTime() int64 {
	if m != nil {
		return m.CreatedTime
	}
	return 0
}

func (m *ActionService) GetReadyTime() int64 {
	if m != nil {
		return m.ReadyTime
	}
	return 0
}

func init() {
	proto.RegisterType((*ActionService)(nil), "models.ActionService")
	proto.RegisterMapType((map[string]string)(nil), "models.ActionService.EnvEntry")
}

func init() {
	proto.RegisterFile("tiops/common/models/action-service.proto", fileDescriptor_76286fa0359ee765)
}

var fileDescriptor_76286fa0359ee765 = []byte{
	// 353 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x51, 0xc1, 0x4a, 0x2b, 0x31,
	0x14, 0x7d, 0xe9, 0xb4, 0x7d, 0x9d, 0xcc, 0x2b, 0x94, 0xf0, 0x84, 0x50, 0x64, 0x08, 0xae, 0x66,
	0xe3, 0x54, 0x2a, 0x88, 0xe8, 0xca, 0x4a, 0x17, 0x6e, 0x47, 0x7f, 0x60, 0x9c, 0xb9, 0x0e, 0xc1,
	0x26, 0x29, 0x99, 0x74, 0x60, 0xfe, 0xc4, 0xcf, 0x71, 0xe9, 0xd2, 0x4f, 0x90, 0xfa, 0x23, 0x92,
	0xa4, 0xa5, 0x53, 0x70, 0x77, 0xcf, 0x39, 0xf7, 0xde, 0x9c, 0x9c, 0x8b, 0x13, 0xc3, 0xd5, 0xba,
	0x9e, 0x15, 0x4a, 0x08, 0x25, 0x67, 0x42, 0x95, 0xb0, 0xaa, 0x67, 0x79, 0x61, 0xb8, 0x92, 0xe7,
	0x35, 0xe8, 0x86, 0x17, 0x90, 0xae, 0xb5, 0x32, 0x8a, 0x0c, 0xbd, 0x38, 0x65, 0xbf, 0x4d, 0x78,
	0xe4, 0x3b, 0xcf, 0xde, 0x03, 0x3c, 0xbe, 0x73, 0x2b, 0x1e, 0xfd, 0x06, 0x42, 0x70, 0x5f, 0xe6,
	0x02, 0x28, 0x62, 0x28, 0x09, 0x33, 0x57, 0x93, 0x53, 0x1c, 0x16, 0x1a, 0x72, 0x03, 0xe5, 0xa2,
	0xa5, 0x3d, 0x27, 0x1c, 0x08, 0xc2, 0x70, 0x54, 0x42, 0x5d, 0x68, 0xbe, 0xb6, 0x7b, 0x68, 0xe0,
	0xf4, 0x2e, 0x45, 0xfe, 0xe3, 0x01, 0x17, 0x79, 0x05, 0xb4, 0xef, 0x34, 0x0f, 0xc8, 0x05, 0x0e,
	0x40, 0x36, 0x74, 0xc0, 0x82, 0x24, 0x9a, 0xc7, 0xa9, 0xb7, 0x97, 0x1e, 0xb9, 0x49, 0x97, 0xb2,
	0x59, 0x4a, 0xa3, 0xdb, 0xcc, 0xb6, 0x92, 0x5b, 0x3c, 0xd6, 0x1b, 0x69, 0xb8, 0x80, 0x7b, 0x25,
	0x5f, 0x78, 0x45, 0x87, 0x0c, 0x25, 0xd1, 0xfc, 0x64, 0x3f, 0x9b, 0x75, 0xc5, 0xec, 0xb8, 0xd7,
	0x9a, 0xd0, 0x90, 0x97, 0x2d, 0xfd, 0xcb, 0x50, 0x32, 0xca, 0x3c, 0x20, 0x31, 0xc6, 0x85, 0x92,
	0x25, 0xb7, 0x8f, 0xd6, 0x74, 0xc4, 0x82, 0x24, 0xcc, 0x3a, 0x8c, 0x9d, 0x5a, 0xa9, 0xea, 0xa1,
	0xa4, 0xa1, 0xb7, 0xee, 0x80, 0x0d, 0xc9, 0xe4, 0x55, 0x4d, 0xb1, 0xeb, 0x77, 0xb5, 0x8d, 0x61,
	0x97, 0xc9, 0x13, 0x17, 0x40, 0x23, 0x86, 0x92, 0x20, 0xeb, 0x52, 0x36, 0x46, 0xf7, 0xa8, 0xd3,
	0xff, 0x39, 0xfd, 0x40, 0x4c, 0xaf, 0xf0, 0x68, 0xff, 0x5b, 0x32, 0xc1, 0xc1, 0x2b, 0xb4, 0xbb,
	0x1b, 0xd8, 0xd2, 0xfa, 0x68, 0xf2, 0xd5, 0x06, 0x76, 0xf1, 0x7b, 0x70, 0xd3, 0xbb, 0x46, 0x8b,
	0xc9, 0xc7, 0x36, 0x46, 0x9f, 0xdb, 0x18, 0x7d, 0x6d, 0x63, 0xf4, 0xf6, 0x1d, 0xff, 0x79, 0x1e,
	0xba, 0xdb, 0x5e, 0xfe, 0x04, 0x00, 0x00, 0xff, 0xff, 0x93, 0x58, 0x8c, 0xd9, 0x31, 0x02, 0x00,
	0x00,
}

func (m *ActionService) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActionService) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActionService) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ReadyTime != 0 {
		i = encodeVarintActionService(dAtA, i, uint64(m.ReadyTime))
		i--
		dAtA[i] = 0x60
	}
	if m.CreatedTime != 0 {
		i = encodeVarintActionService(dAtA, i, uint64(m.CreatedTime))
		i--
		dAtA[i] = 0x58
	}
	if len(m.Tags) > 0 {
		for iNdEx := len(m.Tags) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Tags[iNdEx])
			copy(dAtA[i:], m.Tags[iNdEx])
			i = encodeVarintActionService(dAtA, i, uint64(len(m.Tags[iNdEx])))
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.LogId) > 0 {
		i -= len(m.LogId)
		copy(dAtA[i:], m.LogId)
		i = encodeVarintActionService(dAtA, i, uint64(len(m.LogId)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Conditions) > 0 {
		for iNdEx := len(m.Conditions) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Conditions[iNdEx])
			copy(dAtA[i:], m.Conditions[iNdEx])
			i = encodeVarintActionService(dAtA, i, uint64(len(m.Conditions[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if m.Ready {
		i--
		if m.Ready {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.RuntimeConfig != nil {
		{
			size, err := m.RuntimeConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintActionService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Env) > 0 {
		for k := range m.Env {
			v := m.Env[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintActionService(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintActionService(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintActionService(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Image) > 0 {
		i -= len(m.Image)
		copy(dAtA[i:], m.Image)
		i = encodeVarintActionService(dAtA, i, uint64(len(m.Image)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintActionService(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CreatedBy) > 0 {
		i -= len(m.CreatedBy)
		copy(dAtA[i:], m.CreatedBy)
		i = encodeVarintActionService(dAtA, i, uint64(len(m.CreatedBy)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintActionService(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintActionService(dAtA []byte, offset int, v uint64) int {
	offset -= sovActionService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ActionService) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovActionService(uint64(l))
	}
	l = len(m.CreatedBy)
	if l > 0 {
		n += 1 + l + sovActionService(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovActionService(uint64(l))
	}
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovActionService(uint64(l))
	}
	if len(m.Env) > 0 {
		for k, v := range m.Env {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovActionService(uint64(len(k))) + 1 + len(v) + sovActionService(uint64(len(v)))
			n += mapEntrySize + 1 + sovActionService(uint64(mapEntrySize))
		}
	}
	if m.RuntimeConfig != nil {
		l = m.RuntimeConfig.Size()
		n += 1 + l + sovActionService(uint64(l))
	}
	if m.Ready {
		n += 2
	}
	if len(m.Conditions) > 0 {
		for _, s := range m.Conditions {
			l = len(s)
			n += 1 + l + sovActionService(uint64(l))
		}
	}
	l = len(m.LogId)
	if l > 0 {
		n += 1 + l + sovActionService(uint64(l))
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			l = len(s)
			n += 1 + l + sovActionService(uint64(l))
		}
	}
	if m.CreatedTime != 0 {
		n += 1 + sovActionService(uint64(m.CreatedTime))
	}
	if m.ReadyTime != 0 {
		n += 1 + sovActionService(uint64(m.ReadyTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovActionService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozActionService(x uint64) (n int) {
	return sovActionService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ActionService) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActionService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActionService: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActionService: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActionService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActionService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActionService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActionService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Env", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActionService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthActionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Env == nil {
				m.Env = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowActionService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowActionService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthActionService
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthActionService
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowActionService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthActionService
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthActionService
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipActionService(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthActionService
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Env[mapkey] = mapvalue
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuntimeConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActionService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthActionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RuntimeConfig == nil {
				m.RuntimeConfig = &RuntimeConfig{}
			}
			if err := m.RuntimeConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ready", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ready = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conditions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActionService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Conditions = append(m.Conditions, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActionService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActionService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActionService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedTime", wireType)
			}
			m.CreatedTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadyTime", wireType)
			}
			m.ReadyTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActionService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReadyTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActionService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthActionService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipActionService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowActionService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowActionService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowActionService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthActionService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupActionService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthActionService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthActionService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowActionService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupActionService = fmt.Errorf("proto: unexpected end of group")
)
