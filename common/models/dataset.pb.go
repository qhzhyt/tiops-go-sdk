// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tiops/common/models/dataset.proto

package models

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type DatasetInfo struct {
	XId                  string   `protobuf:"bytes,1,opt,name=_id,json=Id,proto3" json:"_id,omitempty" bson:"_id"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" bson:"name"`
	Tags                 []string `protobuf:"bytes,3,rep,name=tags,proto3" json:"tags,omitempty" bson:"tags"`
	Description          string   `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty" bson:"description"`
	CreatedBy            string   `protobuf:"bytes,5,opt,name=createdBy,proto3" json:"createdBy,omitempty" bson:"createdBy"`
	CreatedTime          int64    `protobuf:"varint,6,opt,name=createdTime,proto3" json:"createdTime,omitempty" bson:"createdTime"`
	UpdatedTime          int64    `protobuf:"varint,7,opt,name=updatedTime,proto3" json:"updatedTime,omitempty" bson:"updatedTime"`
	Readme               string   `protobuf:"bytes,8,opt,name=readme,proto3" json:"readme,omitempty" bson:"readme"`
	IsPublic             bool     `protobuf:"varint,9,opt,name=isPublic,proto3" json:"isPublic,omitempty" bson:"isPublic"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" bson:"-"`
}

func (m *DatasetInfo) Reset()         { *m = DatasetInfo{} }
func (m *DatasetInfo) String() string { return proto.CompactTextString(m) }
func (*DatasetInfo) ProtoMessage()    {}
func (*DatasetInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b46435730ef5476, []int{0}
}
func (m *DatasetInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DatasetInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DatasetInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DatasetInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DatasetInfo.Merge(m, src)
}
func (m *DatasetInfo) XXX_Size() int {
	return m.Size()
}
func (m *DatasetInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_DatasetInfo.DiscardUnknown(m)
}

var xxx_messageInfo_DatasetInfo proto.InternalMessageInfo

func (m *DatasetInfo) GetXId() string {
	if m != nil {
		return m.XId
	}
	return ""
}

func (m *DatasetInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DatasetInfo) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *DatasetInfo) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *DatasetInfo) GetCreatedBy() string {
	if m != nil {
		return m.CreatedBy
	}
	return ""
}

func (m *DatasetInfo) GetCreatedTime() int64 {
	if m != nil {
		return m.CreatedTime
	}
	return 0
}

func (m *DatasetInfo) GetUpdatedTime() int64 {
	if m != nil {
		return m.UpdatedTime
	}
	return 0
}

func (m *DatasetInfo) GetReadme() string {
	if m != nil {
		return m.Readme
	}
	return ""
}

func (m *DatasetInfo) GetIsPublic() bool {
	if m != nil {
		return m.IsPublic
	}
	return false
}

func init() {
	proto.RegisterType((*DatasetInfo)(nil), "models.DatasetInfo")
}

func init() { proto.RegisterFile("tiops/common/models/dataset.proto", fileDescriptor_2b46435730ef5476) }

var fileDescriptor_2b46435730ef5476 = []byte{
	// 283 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0xb1, 0x4e, 0xeb, 0x30,
	0x18, 0x85, 0xaf, 0x93, 0xde, 0x90, 0xb8, 0x03, 0x92, 0x87, 0xca, 0xaa, 0x50, 0x64, 0x32, 0x65,
	0x4a, 0x06, 0x36, 0xc6, 0x88, 0xa5, 0x1b, 0x8a, 0xd8, 0x2b, 0x27, 0x36, 0x91, 0xa5, 0x3a, 0x8e,
	0x6c, 0x77, 0x60, 0x67, 0x67, 0x45, 0x0c, 0x3c, 0x0f, 0x23, 0x8f, 0x80, 0xc2, 0x8b, 0x20, 0xdb,
	0x55, 0xc9, 0xc0, 0xf6, 0x9f, 0xcf, 0xdf, 0xf1, 0x70, 0xe0, 0xb5, 0x15, 0x6a, 0x32, 0x75, 0xaf,
	0xa4, 0x54, 0x63, 0x2d, 0x15, 0xe3, 0x07, 0x53, 0x33, 0x6a, 0xa9, 0xe1, 0xb6, 0x9a, 0xb4, 0xb2,
	0x0a, 0x25, 0x81, 0x6e, 0xc9, 0x5f, 0xaa, 0xa5, 0xc3, 0xc0, 0x75, 0x30, 0x8b, 0x97, 0x08, 0xae,
	0xef, 0x42, 0x77, 0x37, 0x3e, 0x2a, 0x44, 0x60, 0xbc, 0x17, 0x0c, 0x03, 0x02, 0xca, 0xac, 0xb9,
	0x7c, 0x7b, 0x7e, 0x8f, 0x61, 0x67, 0xd4, 0x78, 0x5b, 0xec, 0x05, 0x2b, 0xda, 0x68, 0xc7, 0x10,
	0x82, 0xab, 0x91, 0x4a, 0x8e, 0x23, 0xa7, 0xb4, 0xfe, 0x76, 0xcc, 0xd2, 0xc1, 0xe0, 0x98, 0xc4,
	0x8e, 0xb9, 0x1b, 0x11, 0xb8, 0x66, 0xdc, 0xf4, 0x5a, 0x4c, 0x56, 0xa8, 0x11, 0xaf, 0xbc, 0xbe,
	0x44, 0xe8, 0x0a, 0x66, 0xbd, 0xe6, 0xd4, 0x72, 0xd6, 0x3c, 0xe1, 0xff, 0xfe, 0xfd, 0x17, 0xb8,
	0xfe, 0x29, 0x3c, 0x08, 0xc9, 0x71, 0x42, 0x40, 0x19, 0xb7, 0x4b, 0xe4, 0x8c, 0xe3, 0xc4, 0xce,
	0xc6, 0x45, 0x30, 0x16, 0x08, 0x6d, 0x60, 0xa2, 0x39, 0x65, 0x92, 0xe3, 0xd4, 0x7f, 0x7f, 0x4a,
	0x68, 0x0b, 0x53, 0x61, 0xee, 0x8f, 0xdd, 0x41, 0xf4, 0x38, 0x23, 0xa0, 0x4c, 0xdb, 0x73, 0x6e,
	0xca, 0x8f, 0x39, 0x07, 0x9f, 0x73, 0x0e, 0xbe, 0xe6, 0x1c, 0xbc, 0x7e, 0xe7, 0xff, 0xe0, 0x46,
	0xa8, 0xca, 0x0f, 0x59, 0x85, 0x21, 0xab, 0x30, 0x64, 0x97, 0xf8, 0x09, 0x6f, 0x7e, 0x02, 0x00,
	0x00, 0xff, 0xff, 0x84, 0x20, 0x0d, 0x34, 0x91, 0x01, 0x00, 0x00,
}

func (m *DatasetInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DatasetInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DatasetInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsPublic {
		i--
		if m.IsPublic {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if len(m.Readme) > 0 {
		i -= len(m.Readme)
		copy(dAtA[i:], m.Readme)
		i = encodeVarintDataset(dAtA, i, uint64(len(m.Readme)))
		i--
		dAtA[i] = 0x42
	}
	if m.UpdatedTime != 0 {
		i = encodeVarintDataset(dAtA, i, uint64(m.UpdatedTime))
		i--
		dAtA[i] = 0x38
	}
	if m.CreatedTime != 0 {
		i = encodeVarintDataset(dAtA, i, uint64(m.CreatedTime))
		i--
		dAtA[i] = 0x30
	}
	if len(m.CreatedBy) > 0 {
		i -= len(m.CreatedBy)
		copy(dAtA[i:], m.CreatedBy)
		i = encodeVarintDataset(dAtA, i, uint64(len(m.CreatedBy)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintDataset(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Tags) > 0 {
		for iNdEx := len(m.Tags) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Tags[iNdEx])
			copy(dAtA[i:], m.Tags[iNdEx])
			i = encodeVarintDataset(dAtA, i, uint64(len(m.Tags[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintDataset(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.XId) > 0 {
		i -= len(m.XId)
		copy(dAtA[i:], m.XId)
		i = encodeVarintDataset(dAtA, i, uint64(len(m.XId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDataset(dAtA []byte, offset int, v uint64) int {
	offset -= sovDataset(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DatasetInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.XId)
	if l > 0 {
		n += 1 + l + sovDataset(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovDataset(uint64(l))
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			l = len(s)
			n += 1 + l + sovDataset(uint64(l))
		}
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovDataset(uint64(l))
	}
	l = len(m.CreatedBy)
	if l > 0 {
		n += 1 + l + sovDataset(uint64(l))
	}
	if m.CreatedTime != 0 {
		n += 1 + sovDataset(uint64(m.CreatedTime))
	}
	if m.UpdatedTime != 0 {
		n += 1 + sovDataset(uint64(m.UpdatedTime))
	}
	l = len(m.Readme)
	if l > 0 {
		n += 1 + l + sovDataset(uint64(l))
	}
	if m.IsPublic {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovDataset(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDataset(x uint64) (n int) {
	return sovDataset(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DatasetInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DatasetInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DatasetInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field XId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDataset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDataset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDataset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDataset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDataset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDataset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDataset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDataset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDataset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDataset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedTime", wireType)
			}
			m.CreatedTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedTime", wireType)
			}
			m.UpdatedTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Readme", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDataset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDataset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Readme = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPublic", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsPublic = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipDataset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDataset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDataset(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDataset
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDataset
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDataset
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDataset
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDataset
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDataset
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDataset        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDataset          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDataset = fmt.Errorf("proto: unexpected end of group")
)
